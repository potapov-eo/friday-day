[{"C:\\project\\friday-day\\src\\n2-features\\f5-packs\\pack\\Pack.tsx":"1","C:\\project\\friday-day\\src\\n2-features\\f5-packs\\Packs-reduser.ts":"2","C:\\project\\friday-day\\src\\n2-features\\f6-cards\\Cards-reducer.ts":"3","C:\\project\\friday-day\\src\\n1-main\\m3-dal\\instance.ts":"4","C:\\project\\friday-day\\src\\n2-features\\f6-cards\\Cards.tsx":"5","C:\\project\\friday-day\\src\\n2-features\\f5-packs\\Packs.tsx":"6","C:\\project\\friday-day\\src\\n1-main\\m2-bll\\store.ts":"7","C:\\project\\friday-day\\src\\n2-features\\f1-auth\\a3-recoveryPassword\\RecoveryPassword.tsx":"8","C:\\project\\friday-day\\src\\n2-features\\f2-profile\\Profile.tsx":"9","C:\\project\\friday-day\\src\\n2-features\\f6-learn\\Learn.tsx":"10","C:\\project\\friday-day\\src\\n1-main\\m1-ui\\common\\BooleanModal\\BooleanForm.tsx":"11","C:\\project\\friday-day\\src\\n1-main\\m1-ui\\header\\Header.tsx":"12","C:\\project\\friday-day\\src\\n1-main\\m1-ui\\App.tsx":"13","C:\\project\\friday-day\\src\\n1-main\\m2-bll\\app-reduser.ts":"14","C:\\project\\friday-day\\src\\index.tsx":"15","C:\\project\\friday-day\\src\\n1-main\\m1-ui\\header\\nav\\nav.tsx":"16","C:\\project\\friday-day\\src\\n2-features\\f1-auth\\a4-newPassword\\NewPassword.tsx":"17","C:\\project\\friday-day\\src\\n2-features\\f1-auth\\auth-reducer.ts":"18","C:\\project\\friday-day\\src\\n2-features\\f1-auth\\a1-login\\LoginFormik.tsx":"19","C:\\project\\friday-day\\src\\n2-features\\f1-auth\\a2-register\\Register.tsx":"20"},{"size":3274,"mtime":1614342582977,"results":"21","hashOfConfig":"22"},{"size":7590,"mtime":1614460207884,"results":"23","hashOfConfig":"22"},{"size":6933,"mtime":1614452413528,"results":"24","hashOfConfig":"22"},{"size":3038,"mtime":1614461194633,"results":"25","hashOfConfig":"22"},{"size":4112,"mtime":1614460466264,"results":"26","hashOfConfig":"22"},{"size":6439,"mtime":1614460420409,"results":"27","hashOfConfig":"22"},{"size":702,"mtime":1614459746205,"results":"28","hashOfConfig":"22"},{"size":3035,"mtime":1614461050378,"results":"29","hashOfConfig":"22"},{"size":1418,"mtime":1614460384865,"results":"30","hashOfConfig":"22"},{"size":3955,"mtime":1614450725190,"results":"31","hashOfConfig":"22"},{"size":653,"mtime":1614256269074,"results":"32","hashOfConfig":"22"},{"size":1181,"mtime":1614460100240,"results":"33","hashOfConfig":"22"},{"size":1346,"mtime":1614459950312,"results":"34","hashOfConfig":"22"},{"size":3316,"mtime":1614461478746,"results":"35","hashOfConfig":"22"},{"size":683,"mtime":1614338605106,"results":"36","hashOfConfig":"22"},{"size":1791,"mtime":1614450460548,"results":"37","hashOfConfig":"22"},{"size":3146,"mtime":1614461135925,"results":"38","hashOfConfig":"22"},{"size":5648,"mtime":1614460539012,"results":"39","hashOfConfig":"22"},{"size":3110,"mtime":1614460297239,"results":"40","hashOfConfig":"22"},{"size":3726,"mtime":1614460692103,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1txihgw",{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\project\\friday-day\\src\\n2-features\\f5-packs\\pack\\Pack.tsx",[],"C:\\project\\friday-day\\src\\n2-features\\f5-packs\\Packs-reduser.ts",["84","85","86","87","88","89","90"],"import {CardsAPI, getCardPacksDataType} from '../../../src/n1-main/m3-dal/instance'\r\nimport {Dispatch} from 'redux'\r\nimport {setAppErrorAC, setAppStatusAC, setPublicCardPacksCountAC} from \"../../n1-main/m2-bll/app-reduser\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {AppRootStateType} from \"../../n1-main/m2-bll/store\";\r\nimport {getResponseError} from \"../../n1-main/m2-bll/common/HelperFunctions\";\r\nimport {setIsLoggedIn} from \"../f1-auth/auth-reducer\";\r\n\r\n\r\nlet initialState = {\r\n    cardPacks: [] as Array<PackType>,\r\n    pagination:\r\n        {\r\n            packName: \"\",//совпадение по имени\r\n            min: 0,\r\n            max: 0,//количество карточек в колоде\r\n            sortPacks: \"0updated\",// сортировка\r\n            page: 1, //номер страницы\r\n            pageCount: 3,//кол-во элем на странице\r\n            user_id: \"\",\r\n\r\n        },\r\n    totalPacksCount: 0  //кол-во колод\r\n}\r\nexport type InitialStateType = typeof initialState\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'CARDS/SET-CARD-PACKS':\r\n            return {...state, cardPacks: action.cardPacks}\r\n\r\n        case 'SET-PAGINATION-PROPERTY':\r\n            return {...state, pagination: {...state.pagination, ...action.property}}\r\n\r\n        case \"SET-TOTAL-PACKS-COUNT\":\r\n            return {...state, totalPacksCount: action.packsCount}\r\n\r\n        case \"SET-CURRENT-PAGE\":\r\n            return {...state, pagination: {...state.pagination, page: action.currentPage}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC\r\nexport const setCardPacksAC = (cardPacks: Array<PackType>) => ({type: 'CARDS/SET-CARD-PACKS', cardPacks} as const)\r\nexport const removePackAC = (packId: string) => ({type: 'CARDS/REMOVE-PACK', packId} as const)\r\nexport const addPackAC = (pack: PackType) => ({type: 'CARDS/ADD-PACK', pack} as const)\r\nexport const updatePackAC = (packId: string, pack: PackType) => ({type: 'CARDS/UPDATE-PACK', packId, pack} as const)\r\nexport const setPaginationAC = (property: setPaginationType) => ({type: 'SET-PAGINATION-PROPERTY', property} as const)\r\nexport const setTotalPacksCountAC = (packsCount: number) => ({type: \"SET-TOTAL-PACKS-COUNT\", packsCount} as const)\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: 'SET-CURRENT-PAGE', currentPage} as const)\r\n\r\n//TC\r\n\r\n\r\nexport const getCardPacksTC = (getData: getCardPacksDataType = {}) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const paginationData = getState().packs.pagination\r\n            const response = <AxiosResponse<getCardPacksResponseType>>await CardsAPI.getCardPacks(paginationData)\r\n            const packs = response.data.cardPacks\r\n\r\n            const cardPacksTotalCount = response.data.cardPacksTotalCount\r\n\r\n            const currentPage = getData.page\r\n\r\n            currentPage && dispatch(setCurrentPageAC(currentPage))\r\n            dispatch(setTotalPacksCountAC(cardPacksTotalCount))\r\n            dispatch(setCardPacksAC(packs))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n            dispatch(setIsLoggedIn(true))\r\n\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error =getResponseError(e)\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const addCardPacksTC = (newPackName: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const createResponse = await CardsAPI.createCardsPack(newPackName)\r\n            const paginationData = getState().packs.pagination\r\n            const getResponse = <AxiosResponse<getCardPacksResponseType>>await CardsAPI.getCardPacks(paginationData)\r\n            const packs = getResponse.data.cardPacks\r\n            dispatch(setPublicCardPacksCountAC(getResponse.data.cardPacksTotalCount))\r\n            dispatch( setTotalPacksCountAC(getResponse.data.cardPacksTotalCount))\r\n            dispatch(setCardPacksAC(packs))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            debugger\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error =getResponseError(e)\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const removePackTC = (idCarsPack: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const deleteResponse = await CardsAPI.deleteCardsPack(idCarsPack)\r\n            const paginationData = getState().packs.pagination\r\n            const getResponse = <AxiosResponse<getCardPacksResponseType>>await CardsAPI.getCardPacks(paginationData)\r\n            dispatch( setTotalPacksCountAC(getResponse.data.cardPacksTotalCount))\r\n            const packs = getResponse.data.cardPacks\r\n            dispatch(setPublicCardPacksCountAC(getResponse.data.cardPacksTotalCount))\r\n            dispatch(setCardPacksAC(packs))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error =getResponseError(e)\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const updateTC = (id: string, newNamePack: string, getData: getCardPacksDataType = {}) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const updateResponse = await CardsAPI.updateCardsPack(id, newNamePack)\r\n            const paginationData = getState().packs.pagination\r\n            const getResponse = <AxiosResponse<getCardPacksResponseType>>await CardsAPI.getCardPacks(paginationData)\r\n            const packs = getResponse.data.cardPacks\r\n\r\n            dispatch(setCardPacksAC(packs))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error =getResponseError(e)\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\n\r\n\r\n//types\r\ntype ActionsType =\r\n    | ReturnType<typeof setCardPacksAC>\r\n    | ReturnType<typeof removePackAC>\r\n    | ReturnType<typeof addPackAC>\r\n    | ReturnType<typeof updatePackAC>\r\n    | ReturnType<typeof setPaginationAC>\r\n    | ReturnType<typeof setTotalPacksCountAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n\r\nexport type PackType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name?: string\r\n    private?: boolean\r\n    name: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    cardsCount?: number\r\n    type?: string\r\n    rating?: number\r\n    created?: string\r\n    updated?: string\r\n    more_id?: string\r\n    __v?: number\r\n}\r\nexport type getCardPacksResponseType = {\r\n    cardPacks: Array<PackType>\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number                  // totalItemsCount\r\n    minCardsCount: number\r\n    maxCardsCount: number\r\n    token: string\r\n    tokenDeathTime: Date\r\n}\r\nexport type setPaginationType =\r\n    { packName: string }\r\n    | { min: number }\r\n    | { max: number }\r\n    | { sortPacks: string }\r\n    | { page: number }\r\n    | { pageCount: number }\r\n    | { user_id: string }\r\n\r\n","C:\\project\\friday-day\\src\\n2-features\\f6-cards\\Cards-reducer.ts",["91","92","93","94","95","96","97","98","99","100","101","102","103"],"import {CardsAPI} from \"../../n1-main/m3-dal/instance\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../n1-main/m2-bll/app-reduser\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {AppRootStateType} from \"../../n1-main/m2-bll/store\";\r\nimport {valueType} from \"../../n1-main/m1-ui/common/AddCardForm/AddCardForm\";\r\nimport {getResponseError} from \"../../n1-main/m2-bll/common/HelperFunctions\";\r\n\r\n\r\nconst initialState = {\r\n    cards: [] as Array<CardType>,\r\n    paginationCards: {\r\n        page: 1,\r\n        pageCount: 3,\r\n        cardAnswer: '',\r\n        cardQuestion: '',\r\n        cardsPack_id: '',\r\n        min: 0,\r\n        max: 0,\r\n        sortCards: ''\r\n    },\r\n    totalCardsCount: 0\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-CARDS':\r\n            return {...state, cards: action.cards}\r\n        case \"SET-TOTAL-CADRS-COUNT\":\r\n            return {...state, totalCardsCount: action.packsCount}\r\n        case \"SET-CURRENT-PAGE\":\r\n            return {...state, paginationCards: {...state.paginationCards, page: action.currentPage}}\r\n        case \"SET-ID\":\r\n            return {...state, paginationCards: {...state.paginationCards, cardsPack_id: action.id}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC\r\n\r\nexport const setCardAC = (cards: Array<CardType>) => ({type: 'SET-CARDS', cards} as const)\r\nexport const setTotalCardsCountAC = (packsCount: number) => ({type: \"SET-TOTAL-CADRS-COUNT\", packsCount} as const)\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: 'SET-CURRENT-PAGE', currentPage} as const)\r\nexport const setCurrentIdAC = (id: string) => ({type: 'SET-ID', id} as const)\r\n\r\n//TC\r\n\r\n\r\nexport const getCardTC = () =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n\r\n            const paginationData = getState().cards.paginationCards\r\n            const response = <AxiosResponse<GetCardsResponseType>>await CardsAPI.getCards(paginationData)\r\n            const cards = response.data.cards\r\n\r\n            dispatch(setTotalCardsCountAC(response.data.cardsTotalCount))\r\n            dispatch(setCardAC(cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error =getResponseError(e)\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const addCardTC = (cardsPack_id: string, values: { question: string, answer: string }) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n\r\n            const addResponse = <AxiosResponse<any>>await CardsAPI.createCard(cardsPack_id, values)\r\n            const paginationData = getState().cards.paginationCards\r\n            const response = <AxiosResponse<GetCardsResponseType>>await CardsAPI.getCards(paginationData)\r\n            const cards = response.data.cards\r\n            dispatch(setTotalCardsCountAC(response.data.cardsTotalCount))\r\n            dispatch(setCardAC(cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error =getResponseError(e)\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const removeCardTC = (cardsPack_id: string, cardId: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const removeResponse = <AxiosResponse<any>>await CardsAPI.deleteCard(cardId)\r\n            const paginationData = getState().cards.paginationCards\r\n            const response = <AxiosResponse<GetCardsResponseType>>await CardsAPI.getCards(paginationData)\r\n            const cards = response.data.cards\r\n            dispatch(setTotalCardsCountAC(response.data.cardsTotalCount))\r\n            dispatch(setCardAC(cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error =getResponseError(e)\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const updateCardTC = (cardId: string, value: valueType) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const removeResponse = <AxiosResponse<any>>await CardsAPI.updateCard(cardId, value.question, value.answer)\r\n\r\n            const paginationData = getState().cards.paginationCards\r\n            const response = <AxiosResponse<GetCardsResponseType>>await CardsAPI.getCards(paginationData)\r\n            const cards = response.data.cards\r\n            dispatch(setCardAC(cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error =getResponseError(e)\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const gradeCardTC = (grade: number, card_id: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const Response = <AxiosResponse<any>>await CardsAPI.gradeCard(grade, card_id)\r\n\r\n            const newCards = <CardType[]>getState().cards.cards.map((card) => card._id === card_id ? {\r\n                ...card,\r\n                grade: grade\r\n            } : card)\r\n            dispatch(setCardAC(newCards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error =getResponseError(e)\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\ntype ActionsType = ReturnType<typeof setCardAC>\r\n    | ReturnType<typeof setTotalCardsCountAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setCurrentIdAC>\r\n\r\nexport type GetCardsResponseType = {\r\n    cards: Array<CardType>\r\n    packUserId: string\r\n    page: number\r\n    pageCount: number\r\n    cardsTotalCount: number\r\n    minGrade: number\r\n    token: string\r\n    tokenDeathTime: Date\r\n}\r\nexport type CardType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    user_id: string\r\n    answer: string\r\n    question: string\r\n    grade: number\r\n    shots: number\r\n    comments: string\r\n    type: string\r\n    rating: number\r\n    more_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    answerImg: string\r\n    questionImg: string\r\n    questionVideo: string\r\n}\r\n","C:\\project\\friday-day\\src\\n1-main\\m3-dal\\instance.ts",[],"C:\\project\\friday-day\\src\\n2-features\\f6-cards\\Cards.tsx",["104"],"C:\\project\\friday-day\\src\\n2-features\\f5-packs\\Packs.tsx",["105","106"],"C:\\project\\friday-day\\src\\n1-main\\m2-bll\\store.ts",[],"C:\\project\\friday-day\\src\\n2-features\\f1-auth\\a3-recoveryPassword\\RecoveryPassword.tsx",[],"C:\\project\\friday-day\\src\\n2-features\\f2-profile\\Profile.tsx",["107"],"C:\\project\\friday-day\\src\\n2-features\\f6-learn\\Learn.tsx",["108"],"C:\\project\\friday-day\\src\\n1-main\\m1-ui\\common\\BooleanModal\\BooleanForm.tsx",["109","110"],"C:\\project\\friday-day\\src\\n1-main\\m1-ui\\header\\Header.tsx",[],"C:\\project\\friday-day\\src\\n1-main\\m1-ui\\App.tsx",["111","112"],"C:\\project\\friday-day\\src\\n1-main\\m2-bll\\app-reduser.ts",[],"C:\\project\\friday-day\\src\\index.tsx",[],"C:\\project\\friday-day\\src\\n1-main\\m1-ui\\header\\nav\\nav.tsx",[],"C:\\project\\friday-day\\src\\n2-features\\f1-auth\\a4-newPassword\\NewPassword.tsx",[],"C:\\project\\friday-day\\src\\n2-features\\f1-auth\\auth-reducer.ts",[],"C:\\project\\friday-day\\src\\n2-features\\f1-auth\\a1-login\\LoginFormik.tsx",[],"C:\\project\\friday-day\\src\\n2-features\\f1-auth\\a2-register\\Register.tsx",[],{"ruleId":"113","severity":1,"message":"114","line":62,"column":30,"nodeType":"115","messageId":"116","endLine":62,"endColumn":114},{"ruleId":"117","severity":1,"message":"118","line":86,"column":19,"nodeType":"119","messageId":"120","endLine":86,"endColumn":33},{"ruleId":"113","severity":1,"message":"114","line":88,"column":33,"nodeType":"115","messageId":"116","endLine":88,"endColumn":117},{"ruleId":"117","severity":1,"message":"121","line":106,"column":19,"nodeType":"119","messageId":"120","endLine":106,"endColumn":33},{"ruleId":"113","severity":1,"message":"114","line":108,"column":33,"nodeType":"115","messageId":"116","endLine":108,"endColumn":117},{"ruleId":"117","severity":1,"message":"122","line":125,"column":19,"nodeType":"119","messageId":"120","endLine":125,"endColumn":33},{"ruleId":"113","severity":1,"message":"114","line":127,"column":33,"nodeType":"115","messageId":"116","endLine":127,"endColumn":117},{"ruleId":"113","severity":1,"message":"123","line":58,"column":30,"nodeType":"115","messageId":"116","endLine":58,"endColumn":106},{"ruleId":"117","severity":1,"message":"124","line":76,"column":19,"nodeType":"119","messageId":"120","endLine":76,"endColumn":30},{"ruleId":"113","severity":1,"message":"125","line":76,"column":33,"nodeType":"115","messageId":"116","endLine":76,"endColumn":100},{"ruleId":"113","severity":1,"message":"123","line":78,"column":30,"nodeType":"115","messageId":"116","endLine":78,"endColumn":106},{"ruleId":"117","severity":1,"message":"126","line":95,"column":19,"nodeType":"119","messageId":"120","endLine":95,"endColumn":33},{"ruleId":"113","severity":1,"message":"125","line":95,"column":36,"nodeType":"115","messageId":"116","endLine":95,"endColumn":89},{"ruleId":"113","severity":1,"message":"123","line":97,"column":30,"nodeType":"115","messageId":"116","endLine":97,"endColumn":106},{"ruleId":"117","severity":1,"message":"126","line":113,"column":19,"nodeType":"119","messageId":"120","endLine":113,"endColumn":33},{"ruleId":"113","severity":1,"message":"125","line":113,"column":36,"nodeType":"115","messageId":"116","endLine":113,"endColumn":119},{"ruleId":"113","severity":1,"message":"123","line":116,"column":30,"nodeType":"115","messageId":"116","endLine":116,"endColumn":106},{"ruleId":"117","severity":1,"message":"127","line":131,"column":19,"nodeType":"119","messageId":"120","endLine":131,"endColumn":27},{"ruleId":"113","severity":1,"message":"125","line":131,"column":30,"nodeType":"115","messageId":"116","endLine":131,"endColumn":90},{"ruleId":"113","severity":1,"message":"128","line":133,"column":30,"nodeType":"115","messageId":"116","endLine":136,"endColumn":22},{"ruleId":"129","severity":1,"message":"130","line":38,"column":8,"nodeType":"131","endLine":38,"endColumn":26,"suggestions":"132"},{"ruleId":"129","severity":1,"message":"133","line":51,"column":8,"nodeType":"131","endLine":51,"endColumn":70,"suggestions":"134"},{"ruleId":"129","severity":1,"message":"130","line":59,"column":8,"nodeType":"131","endLine":59,"endColumn":20,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":26,"column":17,"nodeType":"138","endLine":26,"endColumn":57},{"ruleId":"117","severity":1,"message":"139","line":16,"column":11,"nodeType":"119","messageId":"120","endLine":16,"endColumn":17},{"ruleId":"117","severity":1,"message":"140","line":10,"column":10,"nodeType":"119","messageId":"120","endLine":10,"endColumn":15},{"ruleId":"117","severity":1,"message":"141","line":10,"column":17,"nodeType":"119","messageId":"120","endLine":10,"endColumn":25},{"ruleId":"117","severity":1,"message":"142","line":19,"column":26,"nodeType":"119","messageId":"120","endLine":19,"endColumn":43},{"ruleId":"129","severity":1,"message":"143","line":27,"column":8,"nodeType":"131","endLine":27,"endColumn":10,"suggestions":"144"},"@typescript-eslint/consistent-type-assertions","Use 'as AxiosResponse<getCardPacksResponseType>' instead of '<AxiosResponse<getCardPacksResponseType>>'.","TSTypeAssertion","as","@typescript-eslint/no-unused-vars","'createResponse' is assigned a value but never used.","Identifier","unusedVar","'deleteResponse' is assigned a value but never used.","'updateResponse' is assigned a value but never used.","Use 'as AxiosResponse<GetCardsResponseType>' instead of '<AxiosResponse<GetCardsResponseType>>'.","'addResponse' is assigned a value but never used.","Use 'as AxiosResponse<any>' instead of '<AxiosResponse<any>>'.","'removeResponse' is assigned a value but never used.","'Response' is assigned a value but never used.","Use 'as CardType[]' instead of '<CardType[]>'.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["145"],"React Hook useEffect has missing dependencies: 'dispatch', 'paginationUserId', and 'searchName'. Either include them or remove the dependency array. Outer scope values like 'setPaginationAC' aren't valid dependencies because mutating them doesn't re-render the component.",["146"],["147"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'status' is assigned a value but never used.","'title' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'setFirstRendering' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'firstRendering'. Either include them or remove the dependency array.",["148"],{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},"Update the dependencies array to be: [dispatch, isLoggedIn, token]",{"range":"157","text":"158"},"Update the dependencies array to be: [setChange, isChange, setIsChange, isLoading, paginationUserId, dispatch, searchName]",{"range":"159","text":"160"},"Update the dependencies array to be: [dispatch, isLoggedIn]",{"range":"161","text":"162"},"Update the dependencies array to be: [dispatch, firstRendering]",{"range":"163","text":"164"},[2393,2411],"[dispatch, isLoggedIn, token]",[2705,2767],"[setChange, isChange, setIsChange, isLoading, paginationUserId, dispatch, searchName]",[2884,2896],"[dispatch, isLoggedIn]",[1033,1035],"[dispatch, firstRendering]"]