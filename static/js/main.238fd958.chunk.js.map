{"version":3,"sources":["n2-features/f5-packs/Packs.module.css","n1-main/m1-ui/header/nav/nav.module.css","n1-main/m1-ui/header/Header.module.css","n1-main/m1-ui/common/Modal/Modal.module.css","n2-features/f2-profile/Profile.module.css","n1-main/m1-ui/common/Paginator/Paginator.module.css","n1-main/m1-ui/common/ErrorSnackBar/ErrorSnackBar.module.css","n1-main/m1-ui/common/SuperButton/SuperButton.module.css","n1-main/m1-ui/common/SuperInput/SuperInput.module.css","n1-main/m1-ui/common/Preloder/Preloader.module.css","n1-main/m1-ui/common/SortButtons/SortButtons.module.css","n1-main/m1-ui/common/images/Infinity-1s-200px.svg","n1-main/m1-ui/common/Preloder/Preloader.tsx","n2-features/f4-404/Error404.tsx","n1-main/m1-ui/common/SuperButton/SuperButton.tsx","n1-main/m1-ui/common/SuperInput/SuperInput.tsx","n2-features/f0-test/test.tsx","n1-main/m3-dal/instance.ts","n1-main/m2-bll/app-reduser.ts","n2-features/f5-packs/Packs-reduser.ts","n2-features/f6-cards/Cards-reducer.ts","n2-features/f1-auth/a1-login/login-reducer.ts","n2-features/f1-auth/a1-login/LoginFormik.tsx","n2-features/f1-auth/a2-register/register-reducer.ts","n2-features/f1-auth/a2-register/Register.tsx","n2-features/f1-auth/a3-recoveryPassword/recoveryPassword-reducer.ts","n2-features/f1-auth/a3-recoveryPassword/RecoveryPassword.tsx","n2-features/f2-profile/Profile.tsx","n2-features/f1-auth/a4-newPassword/newPassword-reducer.ts","n2-features/f1-auth/a4-newPassword/NewPassword.tsx","n1-main/m1-ui/common/Modal/Modal.tsx","n1-main/m1-ui/common/BooleanModal/BooleanForm.tsx","n1-main/m1-ui/common/AddForm/AddForm.tsx","n2-features/f5-packs/pack/Pack.tsx","n1-main/m1-ui/common/SortButtons/SortButtons.tsx","n1-main/m1-ui/common/Paginator/Paginator.tsx","n2-features/f5-packs/Packs.tsx","n1-main/m1-ui/common/AddCardForm/AddCardForm.tsx","n2-features/f6-cards/card/Card.tsx","n2-features/f6-cards/Cards.tsx","n2-features/f6-learn/Learn.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/common/ErrorSnackBar/ErrorSnackBar.tsx","n1-main/m1-ui/header/nav/nav.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/App.tsx","reportWebVitals.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","Preloader","className","style","pre","src","preloader","height","Error404","alt","SuperButton","name","restProps","s","button","SuperInput","input","Test","type","instance","axios","create","baseURL","withCredentials","AuthAPI","post","email","password","rememberMe","delete","RegisterAPI","data","recoveryPasswordAPI","CardsAPI","paginationData","get","params","newPackName","cardsPack","idCarsPack","id","newNamePack","put","_id","paginationCardsData","cardsPack_id","values","card","cardId","question","answer","grade","card_id","initialState","status","error","UserData","avatar","publicCardPacksCount","created","updated","isAdmin","verified","isLoggedIn","devVersion","setAppStatusAC","setAppErrorAC","receivedResponseAC","userData","cardPacks","pagination","packName","min","max","sortPacks","page","pageCount","user_id","totalPacksCount","setCardPacksAC","setPaginationAC","property","setTotalPacksCountAC","packsCount","setCurrentPageAC","currentPage","getCardPacksTC","getData","dispatch","getState","a","packs","response","cardPacksTotalCount","setIsLoggedIn","message","cards","paginationCards","cardAnswer","cardQuestion","sortCards","totalCardsCount","setCardAC","setTotalCardsCountAC","setCurrentIdAC","getCardTC","cardsTotalCount","value","Login","useSelector","state","app","useDispatch","disable","formik","useFormik","initialValues","validate","errors","test","onSubmit","mail","remember_Me","thunk","resetForm","to","PATH","PROFILE","handleSubmit","onChange","handleChange","onBlur","handleBlur","placeholder","touched","color","checked","disabled","isRegister","Register","register","password2","length","LOGIN","registeredEmail","RecoveryPassword","recoveryPassword","from","then","res","success","catch","e","useParams","token","Profile","profile","profileContainer","info","newPassword","setPasswordAC","NewPassword","console","log","resetPasswordToken","Modal","props","activeModal","modal","modalActive","onClick","setActiveModal","modalContant","modalContantactive","stopPropagation","children","BooleanForm","React","memo","push","useState","addItemTitle","AddForm","addItem","text","itemName","buttonName","Pack","activeUpdatePackModal","setActiveUpdatePackModal","registerUserId","isMyPack","userId","activeDelPackModal","setActiveDelPackModal","tableString","cardsCount","CARDS","pack_id","activeClassName","activeLink","LEARN","getResponse","updateTC","isDel","SortButtons","tableSortIcons","param","icon","faSortUp","size","faSortDown","Paginator","pagesCount","Math","ceil","totalItemsCount","pageSize","pages","i","portionCount","portionSize","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","filter","p","map","coursor","selectedPage","onPageChanged","Packs","isChange","setIsChange","idTimeout","setIdTimeout","searchName","setSearchName","activeAddPackModal","setActiveAddPackModal","isLoading","setChange","useCallback","clearTimeout","window","setTimeout","useEffect","pageNumber","table","currentTarget","tableColumnTitle","addCardPacksTC","slice","AddCardForm","addCard","Card","activeAddCardModal","setActiveAddCardModal","updateCardTC","Cards","pack","find","newNumber","Learn","isChecked","setIsChecked","first","setFirst","setCard","getCard","sum","reduce","acc","rand","random","newSum","setGrade","newCards","g","HOME","TEST","REGISTER","RECOVERY_PASSWORD","NEW_PASSWORD","PACK","Routes","path","exact","render","ErrorSnackBar","notification","errorMessage","close","Nav","nav","Header","UserName","header","faDAndD","burger","href","burgerToggle","nk1","nk2","nk3","margin","fontWeight","fontSize","App","firstRendering","setFirstRendering","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","login","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.238fd958.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Packs_table__2Naa-\",\"tableString\":\"Packs_tableString__mwSXx\",\"tableColumnTitle\":\"Packs_tableColumnTitle__3VRAv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__1K_HG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__P8m-Z\",\"burgerToggle\":\"Header_burgerToggle__3gMSP\",\"nk1\":\"Header_nk1__1mUjG\",\"nk3\":\"Header_nk3__2JrMK\",\"nk2\":\"Header_nk2__A8gP4\",\"devInput\":\"Header_devInput__1e_Y_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__3RLL0\",\"modalActive\":\"Modal_modalActive__ZE80p\",\"modalContant\":\"Modal_modalContant__2fq7x\",\"modalContantactive\":\"Modal_modalContantactive__3OTnc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__AOdLM\",\"profileContainer\":\"Profile_profileContainer__1GNWh\",\"info\":\"Profile_info__bWyEn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__DEW0s\",\"pageNumber\":\"Paginator_pageNumber__tlVzE\",\"selectedPage\":\"Paginator_selectedPage__2ULFC\",\"coursor\":\"Paginator_coursor__2H2t0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"ErrorSnackBar_notification__N4HPG\",\"text\":\"ErrorSnackBar_text__2glv8\",\"close\":\"ErrorSnackBar_close__1paLn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SuperButton_button__1JisP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInput_input__1p_BM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pre\":\"Preloader_pre__3-i-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableSortIcons\":\"SortButtons_tableSortIcons__3gyjZ\"};","export default __webpack_public_path__ + \"static/media/Infinity-1s-200px.2a677e42.svg\";","import React from 'react';\r\nimport style from './Preloader.module.css'\r\nimport preloader from '../images/Infinity-1s-200px.svg'\r\n\r\n\r\nlet Preloader = () => {\r\n    return <div className={style.pre} >\r\n        <img src={preloader}  style={ { height: 200 } }/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;\r\n","import React from 'react'\n\n\nexport const Error404 = () => {\n    return (\n        <div className=\"App\">\n            <div>404</div>\n            <img src=\"https://programmist1s.ru/wp-content/uploads/2013/09/Pole-ob'ekta-nedostupno-dlya-zapisi-1S.jpg\"\n                 alt=\"404\"/>\n            <div>Page not found!</div>\n        </div>\n    )\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\nimport s from \"./SuperButton.module.css\";\nimport './SuperButton.module.css'\n\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n\n    name?:string\n\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        name=\"push\",\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n\n\n    return (\n        <button className={s.button}\n                {...restProps}\n            //  {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        >{name} </button>\n    );\n}\n\nexport default SuperButton;\n","import React, {DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperInput.module.css\";\r\nimport './SuperInput.module.css'\r\n\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    name?: string\r\n}\r\n\r\nconst SuperInput: React.FC<SuperButtonPropsType> = (\r\n    {\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n\r\n\r\n    return (\r\n        <input {...restProps} className={s.input}\r\n        />\r\n    );\r\n}\r\n\r\nexport default SuperInput;\r\n","import React from 'react'\r\nimport SuperButton from \"../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport SuperInput from \"../../n1-main/m1-ui/common/SuperInput/SuperInput\";\r\nimport {Error404} from \"../f4-404/Error404\";\r\n\r\n\r\nexport const Test = () => {\r\n       return (\r\n        <div className=\"App\">\r\n            <SuperButton/>\r\n            <SuperButton name={\"xxx\"}/>\r\n            <SuperInput type=\"text\"/>\r\n            <Error404/>\r\n        </div>\r\n    )\r\n}","import axios from \"axios\";\r\n\r\nimport {RegisterParamsType} from \"../../n2-features/f1-auth/a2-register/register-reducer\";\r\nimport {registeredEmailType} from \"../../n2-features/f1-auth/a3-recoveryPassword/recoveryPassword-reducer\";\r\nimport {SetPasswordType} from \"../../n2-features/f1-auth/a4-newPassword/newPassword-reducer\";\r\n\r\nimport {DEV_VERSION} from \"../../config\";\r\n\r\n/*const DEVVERSION = store.getState().app.devVersion*/\r\nexport const baseURL = !DEV_VERSION\r\n    ? \"http://localhost:7542/2.0\"\r\n    : \"https://neko-back.herokuapp.com/2.0\"\r\nexport const instance = axios.create({baseURL, withCredentials: true})\r\n\r\n\r\nexport const AuthAPI = {\r\n    getAuthMe() {\r\n        return instance.post(`auth/me`,)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/me`)\r\n    }\r\n}\r\n\r\nexport const RegisterAPI = {\r\n    register(data: RegisterParamsType) {\r\n        return instance.post(\"/auth/register\", data)\r\n    }\r\n}\r\n\r\nexport const recoveryPasswordAPI = {\r\n    registeredEmail(data: registeredEmailType) {\r\n        return instance.post('/auth/forgot', data)\r\n    },\r\n    setPassword(data: SetPasswordType) {\r\n        return instance.post('/auth/set-new-password', data)\r\n    }\r\n}\r\n\r\nexport const CardsAPI = {\r\n    getCardPacks(paginationData: any) {\r\n        return instance.get(`cards/pack`, {params: paginationData})\r\n    },\r\n\r\n    createCardsPack(newPackName: string) {\r\n        return instance.post(`cards/pack`, {cardsPack: {name: newPackName}})\r\n    },\r\n    deleteCardsPack(idCarsPack: string) {\r\n        return instance.delete(`cards/pack/?id=${idCarsPack}`)\r\n    },\r\n    updateCardsPack(id: string, newNamePack: string) {\r\n        return instance.put(`cards/pack/`, {cardsPack: {_id: id, name: newNamePack}})\r\n    },\r\n    getCards(paginationCardsData: any) {\r\n        return instance.get(`cards/card/`, {params: paginationCardsData})\r\n    },\r\n    createCard(cardsPack_id: string, values: { question: string, answer: string }) {\r\n        return instance.post(`cards/card`, {\r\n            card:\r\n                {\r\n                    cardsPack_id: cardsPack_id,\r\n                    ...values\r\n                }\r\n        })\r\n    },\r\n    deleteCard(idCarsPack: string) {\r\n        return instance.delete(`cards/card/?id=${idCarsPack}`)\r\n    },\r\n    updateCard(cardId: string, question: string, answer: string) {\r\n        return instance.put(`cards/card`, {\r\n            card: {\r\n                _id: cardId,\r\n                question: question,\r\n                answer: answer\r\n\r\n            }\r\n        })\r\n    },\r\n    gradeCard(grade: number, card_id: string) {\r\n        return instance.put(`cards/grade`,\r\n            {\r\n                grade: grade,\r\n                card_id: card_id\r\n\r\n            }\r\n        )\r\n    },\r\n\r\n}\r\nexport type cardsPackType = {\r\n    _id: string\r\n    name?: string\r\n}\r\n\r\nexport type getCardPacksDataType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type getCardsDataType = {\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    cardsPack_id: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number\r\n\r\n}","import {setIsLoggedIn, setUserData} from \"../../n2-features/f1-auth/a1-login/login-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type UserDataType = {\r\n    _id: string\r\n    email: string | null,\r\n    name: string | null,\r\n    avatar: string | null,\r\n    publicCardPacksCount: number | null,\r\n    created: Date | null,\r\n    updated: Date | null,\r\n    isAdmin: boolean,\r\n    verified: boolean, // подтвердил ли почту\r\n    rememberMe: boolean,\r\n} | null\r\nexport type AppInitialStateType = {\r\n    error: string | null\r\n    status: RequestStatusType\r\n    UserData: UserDataType\r\n    isLoggedIn: boolean\r\n    userId?: string\r\n    devVersion: boolean\r\n\r\n\r\n}\r\nconst initialState: AppInitialStateType = {\r\n    status: 'succeeded',\r\n    error: null,\r\n    UserData: {\r\n        _id: \"\",\r\n        email: null as string | null,\r\n        name: null as string | null,\r\n        avatar: null as string | null,\r\n        publicCardPacksCount: null as number | null,\r\n        created: null as Date | null,\r\n        updated: null as Date | null,\r\n        isAdmin: false,\r\n        verified: false, // подтвердил ли почту\r\n        rememberMe: false,\r\n    },\r\n    isLoggedIn: false,\r\n    devVersion: false // для переключения м-ду локальным бэком и хироку\r\n\r\n}\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: ActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"SET_USER_DATA\":\r\n            return {...state, UserData: action.userData}\r\n        case \"SET_ISLOGGEDIN\":\r\n            return {...state, isLoggedIn: action.value}\r\n        case \"SET-RECEIVED-RESPONSE\":\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n                error: action.error,\r\n                UserData: action.userData,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        case 'SET-DEV_VERSION':\r\n            return {...state, devVersion: action.devVersion}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setDevVersionAC = (devVersion: boolean) =>\r\n    ({type: 'SET-DEV_VERSION', devVersion} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) =>\r\n    ({type: 'APP/SET-ERROR', error} as const)\r\nexport const receivedResponseAC = (userData: UserDataType, status: RequestStatusType, error: string | null, isLoggedIn: boolean) =>\r\n    ({type: 'SET-RECEIVED-RESPONSE', userData, status, error, isLoggedIn} as const)\r\n\r\n\r\nexport type setAppStatusACType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorACType = ReturnType<typeof setAppErrorAC>\r\nexport type receivedResponseACType = ReturnType<typeof receivedResponseAC>\r\nexport type setDevVersionACType = ReturnType<typeof setDevVersionAC>\r\n\r\n\r\ntype ActionsType =\r\n    setAppStatusACType\r\n    | setAppErrorACType\r\n    | ReturnType<typeof setUserData>\r\n    | ReturnType<typeof setIsLoggedIn>\r\n    | receivedResponseACType\r\n    | setDevVersionACType\r\n\r\n\r\n\r\n\r\n","import {CardsAPI, getCardPacksDataType} from '../../../src/n1-main/m3-dal/instance'\r\nimport {Dispatch} from 'redux'\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../n1-main/m2-bll/app-reduser\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {AppRootStateType} from \"../../n1-main/m2-bll/store\";\r\nimport {setIsLoggedIn} from \"../f1-auth/a1-login/login-reducer\";\r\n\r\n\r\nlet initialState = {\r\n    cardPacks: [] as Array<PackType>,\r\n    pagination:\r\n        {\r\n            packName: \"\",//совпадение по имени\r\n            min: 0,\r\n            max: 0,//количество карточек в колоде\r\n            sortPacks: \"0updated\",// сортировка\r\n            page: 1, //номер страницы\r\n            pageCount: 3,//кол-во элем на странице\r\n            user_id: \"\",\r\n\r\n        },\r\n    totalPacksCount: 0  //кол-во колод\r\n}\r\nexport type InitialStateType = typeof initialState\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'CARDS/SET-CARD-PACKS':\r\n            return {...state, cardPacks: action.cardPacks}\r\n\r\n        case 'SET-PAGINATION-PROPERTY':\r\n            return {...state, pagination: {...state.pagination, ...action.property}}\r\n\r\n        case \"SET-TOTAL-PACKS-COUNT\":\r\n            return {...state, totalPacksCount: action.packsCount}\r\n\r\n        case \"SET-CURRENT-PAGE\":\r\n            return {...state, pagination: {...state.pagination, page: action.currentPage}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC\r\nexport const setCardPacksAC = (cardPacks: Array<PackType>) => ({type: 'CARDS/SET-CARD-PACKS', cardPacks} as const)\r\nexport const removePackAC = (packId: string) => ({type: 'CARDS/REMOVE-PACK', packId} as const)\r\nexport const addPackAC = (pack: PackType) => ({type: 'CARDS/ADD-PACK', pack} as const)\r\nexport const updatePackAC = (packId: string, pack: PackType) => ({type: 'CARDS/UPDATE-PACK', packId, pack} as const)\r\n\r\nexport const setPaginationAC = (property: setPaginationType) => ({type: 'SET-PAGINATION-PROPERTY', property} as const)\r\n\r\nexport const setTotalPacksCountAC = (packsCount: number) => ({type: \"SET-TOTAL-PACKS-COUNT\", packsCount} as const)\r\n\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: 'SET-CURRENT-PAGE', currentPage} as const)\r\n\r\n//TC\r\n\r\n\r\nexport const getCardPacksTC = (getData: getCardPacksDataType = {}) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const paginationData = getState().packs.pagination\r\n            const response = <AxiosResponse<getCardPacksResponseType>>await CardsAPI.getCardPacks(paginationData)\r\n            const packs = response.data.cardPacks\r\n\r\n            const cardPacksTotalCount = response.data.cardPacksTotalCount\r\n\r\n            const currentPage = getData.page\r\n\r\n            currentPage && dispatch(setCurrentPageAC(currentPage))\r\n            dispatch(setTotalPacksCountAC(cardPacksTotalCount))\r\n            dispatch(setCardPacksAC(packs))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n            dispatch(setIsLoggedIn(true))\r\n\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const addCardPacksTC = (newPackName: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const createResponse = await CardsAPI.createCardsPack(newPackName)\r\n            const paginationData = getState().packs.pagination\r\n            const getResponse = <AxiosResponse<getCardPacksResponseType>>await CardsAPI.getCardPacks(paginationData)\r\n            const packs = getResponse.data.cardPacks\r\n            dispatch(setCardPacksAC(packs))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            debugger\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const removePackTC = (idCarsPack: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const deleteResponse = await CardsAPI.deleteCardsPack(idCarsPack)\r\n            const paginationData = getState().packs.pagination\r\n            const getResponse = <AxiosResponse<getCardPacksResponseType>>await CardsAPI.getCardPacks(paginationData)\r\n            const packs = getResponse.data.cardPacks\r\n            dispatch(setCardPacksAC(packs))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const updateTC = (id: string, newNamePack: string, getData: getCardPacksDataType = {}) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const updateResponse = await CardsAPI.updateCardsPack(id, newNamePack)\r\n            const paginationData = getState().packs.pagination\r\n            const getResponse = <AxiosResponse<getCardPacksResponseType>>await CardsAPI.getCardPacks(paginationData)\r\n            const packs = getResponse.data.cardPacks\r\n            dispatch(setCardPacksAC(packs))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\n\r\n\r\n//types\r\ntype ActionsType =\r\n    | ReturnType<typeof setCardPacksAC>\r\n    | ReturnType<typeof removePackAC>\r\n    | ReturnType<typeof addPackAC>\r\n    | ReturnType<typeof updatePackAC>\r\n    | ReturnType<typeof setPaginationAC>\r\n    | ReturnType<typeof setTotalPacksCountAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n\r\nexport type PackType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name?: string\r\n    private?: boolean\r\n    name: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    cardsCount?: number\r\n    type?: string\r\n    rating?: number\r\n    created?: string\r\n    updated?: string\r\n    more_id?: string\r\n    __v?: number\r\n}\r\nexport type getCardPacksResponseType = {\r\n    cardPacks: Array<PackType>\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number                  // totalItemsCount\r\n    minCardsCount: number\r\n    maxCardsCount: number\r\n    token: string\r\n    tokenDeathTime: Date\r\n}\r\nexport type setPaginationType =\r\n    { packName: string }\r\n    | { min: number }\r\n    | { max: number }\r\n    | { sortPacks: string }\r\n    | { page: number }\r\n    | { pageCount: number }\r\n    | { user_id: string }\r\n\r\n","import {CardsAPI} from \"../../n1-main/m3-dal/instance\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../n1-main/m2-bll/app-reduser\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {AppRootStateType} from \"../../n1-main/m2-bll/store\";\r\nimport {valueType} from \"../../n1-main/m1-ui/common/AddCardForm/AddCardForm\";\r\n\r\n\r\nconst initialState = {\r\n    cards: [] as Array<CardType>,\r\n    paginationCards: {\r\n        page: 1,\r\n        pageCount: 3,\r\n        cardAnswer: '',\r\n        cardQuestion: '',\r\n        cardsPack_id: '',\r\n        min: 0,\r\n        max: 0,\r\n        sortCards: ''\r\n    },\r\n    totalCardsCount: 0\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-CARDS':\r\n            return {...state, cards: action.cards}\r\n        case \"SET-TOTAL-CADRS-COUNT\":\r\n            return {...state, totalCardsCount: action.packsCount}\r\n        case \"SET-CURRENT-PAGE\":\r\n            return {...state, paginationCards: {...state.paginationCards, page: action.currentPage}}\r\n        case \"SET-ID\":\r\n            return {...state, paginationCards: {...state.paginationCards, cardsPack_id: action.id}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC\r\n\r\nexport const setCardAC = (cards: Array<CardType>) => ({type: 'SET-CARDS', cards} as const)\r\nexport const setTotalCardsCountAC = (packsCount: number) => ({type: \"SET-TOTAL-CADRS-COUNT\", packsCount} as const)\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: 'SET-CURRENT-PAGE', currentPage} as const)\r\nexport const setCurrentIdAC = (id: string) => ({type: 'SET-ID', id} as const)\r\n\r\n//TC\r\n\r\n\r\nexport const getCardTC = () =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\ndebugger\r\n            const paginationData = getState().cards.paginationCards\r\n            const response = <AxiosResponse<GetCardsResponseType>>await CardsAPI.getCards(paginationData)\r\n            const cards = response.data.cards\r\n\r\n            dispatch(setTotalCardsCountAC(response.data.cardsTotalCount))\r\n            dispatch(setCardAC(cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) { debugger\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const addCardTC = (cardsPack_id: string, values: { question: string, answer: string }) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\ndebugger\r\n            const addResponse = <AxiosResponse<any>>await CardsAPI.createCard(cardsPack_id, values)\r\n            const paginationData = getState().cards.paginationCards\r\n            const response = <AxiosResponse<GetCardsResponseType>>await CardsAPI.getCards(paginationData)\r\n            const cards = response.data.cards\r\n            dispatch(setTotalCardsCountAC(response.data.cardsTotalCount))\r\n            dispatch(setCardAC(cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n            debugger\r\n        } catch (e) {debugger\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const removeCardTC = (cardsPack_id: string, cardId: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const removeResponse = <AxiosResponse<any>>await CardsAPI.deleteCard(cardId)\r\n            const paginationData = getState().cards.paginationCards\r\n            const response = <AxiosResponse<GetCardsResponseType>>await CardsAPI.getCards(paginationData)\r\n            const cards = response.data.cards\r\n            dispatch(setTotalCardsCountAC(response.data.cardsTotalCount))\r\n            dispatch(setCardAC(cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const updateCardTC = (cardId: string, value: valueType) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const removeResponse = <AxiosResponse<any>>await CardsAPI.updateCard(cardId, value.question, value.answer)\r\n\r\n            const paginationData = getState().cards.paginationCards\r\n            const response = <AxiosResponse<GetCardsResponseType>>await CardsAPI.getCards(paginationData)\r\n            const cards = response.data.cards\r\n            dispatch(setCardAC(cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const gradeCardTC = (grade: number, card_id: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const Response = <AxiosResponse<any>>await CardsAPI.gradeCard(grade, card_id)\r\n\r\n            const newCards = <CardType[]>getState().cards.cards.map((card) => card._id === card_id ? {\r\n                ...card,\r\n                grade: grade\r\n            } : card)\r\n            dispatch(setCardAC(newCards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\ntype ActionsType = ReturnType<typeof setCardAC>\r\n    | ReturnType<typeof setTotalCardsCountAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setCurrentIdAC>\r\n\r\nexport type GetCardsResponseType = {\r\n    cards: Array<CardType>\r\n    packUserId: string\r\n    page: number\r\n    pageCount: number\r\n    cardsTotalCount: number\r\n    minGrade: number\r\n    token: string\r\n    tokenDeathTime: Date\r\n}\r\nexport type CardType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    user_id: string\r\n    answer: string\r\n    question: string\r\n    grade: number\r\n    shots: number\r\n    comments: string\r\n    type: string\r\n    rating: number\r\n    more_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    answerImg: string\r\n    questionImg: string\r\n    questionVideo: string\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {AuthAPI} from '../../../n1-main/m3-dal/instance'\r\nimport {\r\n    receivedResponseAC,\r\n    setAppErrorAC,\r\n    setAppStatusAC,\r\n\r\n    UserDataType\r\n} from \"../../../n1-main/m2-bll/app-reduser\";\r\nimport {setCardPacksAC} from \"../../f5-packs/Packs-reduser\";\r\nimport {setCardAC} from \"../../f6-cards/Cards-reducer\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst SET_ISLOGGEDIN = 'SET_ISLOGGEDIN'\r\n\r\nconst initialState = {}\r\n\r\nexport const loginReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC\r\nexport const setUserData = (userData: UserDataType) =>\r\n    ({\r\n        type: SET_USER_DATA, userData\r\n    } as const)\r\n\r\nexport const setIsLoggedIn = (value: boolean) => ({type: SET_ISLOGGEDIN, value} as const)\r\n\r\n//TC\r\n\r\nexport const getMe = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let response = await AuthAPI.getAuthMe()\r\n        let userData = response.data\r\n        dispatch(receivedResponseAC(userData, 'succeeded', null, true))\r\n             } catch (e) {\r\n        dispatch(setAppStatusAC('failed'))\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console')\r\n        dispatch(setAppErrorAC(error))\r\n        dispatch( setIsLoggedIn(false))\r\n              }\r\n}\r\n\r\nexport const login = (mail: string, password: string, remember_Me: boolean) =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            let response = await AuthAPI.login(mail, password, remember_Me)\r\n            let userData = response.data\r\n            dispatch(receivedResponseAC(userData, 'succeeded', null, true))\r\n\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\n\r\nexport const logout = () =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            await AuthAPI.logout()\r\n            dispatch(receivedResponseAC(null, 'succeeded', null, false))\r\n            dispatch(setCardPacksAC([]))\r\n            dispatch(setCardAC([]))\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n\r\n    }\r\n\r\n//types\r\ntype ActionsType = | ReturnType<typeof setUserData> | ReturnType<typeof setIsLoggedIn>\r\ntype InitialStateType = typeof initialState\r\n","import React from 'react'\r\nimport SuperInput from '../../../n1-main/m1-ui/common/SuperInput/SuperInput';\r\nimport SuperButton from '../../../n1-main/m1-ui/common/SuperButton/SuperButton';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {login} from './login-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useFormik} from 'formik';\r\nimport {AppRootStateType} from '../../../../src/n1-main/m2-bll/store'\r\nimport {PATH} from \"../../../n1-main/m1-ui/routes/Routes\";\r\nimport {RequestStatusType} from \"../../../n1-main/m2-bll/app-reduser\";\r\n\r\n\r\nexport const Login = () => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const disable = status === 'loading'\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"Potapov.eo@mail.ru\",\r\n            password: \"jekajeka\",\r\n            rememberMe: true\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            const thunk = login(values.email, values.password, values.rememberMe)\r\n            dispatch(thunk)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n          return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>LOG IN</h1>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div><SuperInput name=\"email\" onChange={formik.handleChange} onBlur={formik.handleBlur} type=\"text\"\r\n                                 value={formik.values.email} placeholder={\"Email\"}/></div>\r\n                {formik.touched.email && formik.errors.email ?\r\n                    <div style={{color: \"red\"}}> {formik.errors.email} </div> : null}\r\n                <div><SuperInput name=\"password\" onChange={formik.handleChange} onBlur={formik.handleBlur}\r\n                                 type=\"password\" value={formik.values.password} placeholder={\"Password\"}/></div>\r\n                {formik.touched.password && formik.errors.password ?\r\n                    <div style={{color: \"red\"}}> {formik.errors.password} </div> : null}\r\n                <div><span>Remember me </span><SuperInput name=\"rememberMe\" onChange={formik.handleChange}\r\n                                                          checked={formik.values.rememberMe} type=\"checkbox\"/></div>\r\n                <div><SuperButton disabled={disable} name=\"log in\"/></div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n","import {RegisterAPI} from \"../../../n1-main/m3-dal/instance\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    setAppErrorAC,\r\n    setAppErrorACType,\r\n    setAppStatusAC,\r\n    setAppStatusACType\r\n} from \"../../../n1-main/m2-bll/app-reduser\";\r\n\r\n\r\nconst initialState = {\r\n    isRegister: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-IS-REGISTER':\r\n            return {...state, isRegister: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setIsRegister = (value: boolean) => ({type: 'SET-IS-REGISTER', value} as const)\r\n\r\nexport const RegisterTC = (data: RegisterParamsType) => async (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        await RegisterAPI.register(data)\r\n        dispatch(setIsRegister(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        dispatch(setAppErrorAC(null))\r\n    } catch (e) {\r\n        dispatch(setAppStatusAC('failed'))\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console')\r\n\r\n        dispatch(setAppErrorAC(error))\r\n    }\r\n\r\n}\r\n\r\nexport type RegisterParamsType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setIsRegister> | setAppStatusACType | setAppErrorACType\r\n\r\n","import React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RegisterTC} from \"./register-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {PATH} from \"../../../n1-main/m1-ui/routes/Routes\";\r\nimport {RequestStatusType, setAppErrorAC} from \"../../../n1-main/m2-bll/app-reduser\";\r\nimport SuperButton from \"../../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport SuperInput from \"../../../n1-main/m1-ui/common/SuperInput/SuperInput\";\r\n\r\nexport const Register = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n    const isRegister = useSelector<AppRootStateType, boolean>(state => state.register.isRegister)\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n    }\r\n    const disable = status === 'loading'\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'potapov.eo@yandex.ru',\r\n            password: 'jekajeka',\r\n            password2: 'jekajeka',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'email Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password Required';\r\n            } else if (values.password.length < 7) {\r\n                errors.password = 'Invalid email address';\r\n            } else if (values.password2 !== values.password) {\r\n                errors.password = 'Passwords do not match';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n\r\n        onSubmit: values => {\r\n\r\n            /*dispatch(RegisterTC(values))*/\r\n            dispatch(RegisterTC({email: values.email, password: values.password}))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n     /*   dispatch(setAppErrorAC(\"you are already logged in\"))*/\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n    if (isRegister) {\r\n\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return <div className=\"App\">\r\n\r\n        <form onSubmit={formik.handleSubmit}>\r\n           <h1>REGISTRATION</h1> \r\n            <div>\r\n                <SuperInput\r\n                    placeholder={\"email\"}\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.email}\r\n                />\r\n                {formik.touched.email && formik.errors.email ?\r\n                    <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n            </div>\r\n            <div>\r\n                <SuperInput\r\n                    placeholder={\"password\"}\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password}\r\n                />\r\n            </div>\r\n            <div>\r\n                <SuperInput\r\n                    placeholder={\"password2\"}\r\n                    type=\"password\"\r\n                    name=\"password2\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password2}\r\n                />\r\n                {formik.touched.password && formik.errors.password ?\r\n                    <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n            </div>\r\n            <SuperButton disabled={disable} type=\"submit\"/>\r\n\r\n        </form>\r\n\r\n\r\n    </div>\r\n}","import {Dispatch} from 'redux'\r\nimport {recoveryPasswordAPI} from \"../../../n1-main/m3-dal/instance\";\r\nimport {\r\n    setAppErrorAC,\r\n    setAppErrorACType,\r\n    setAppStatusAC,\r\n    setAppStatusACType\r\n} from \"../../../n1-main/m2-bll/app-reduser\";\r\n\r\n\r\nconst initialState = {\r\n    registeredEmail: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoveryPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"VERIFICATION-EMAIL\":\r\n            return {...state, registeredEmail: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst verificationEmailAC = (value: boolean) => {\r\n    return {type: 'VERIFICATION-EMAIL', value} as const\r\n}\r\n\r\nexport const verificationEmailTC = (data: registeredEmailType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        return recoveryPasswordAPI.registeredEmail(data).then(res => {\r\n            if (res.data.success) {\r\n                dispatch(verificationEmailAC(true))\r\n            }\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n\r\n            .catch((e) => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                const error = e.response\r\n                    ? e.response.data.error\r\n                    : (e.message + ', more details in the console')\r\n                dispatch(setAppErrorAC(error))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport type registeredEmailType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\n\r\ntype ActionsType = ReturnType<typeof verificationEmailAC> | setAppStatusACType | setAppErrorACType","import React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport SuperButton from \"../../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport SuperInput from \"../../../n1-main/m1-ui/common/SuperInput/SuperInput\";\r\nimport {verificationEmailTC} from \"./recoveryPassword-reducer\";\r\nimport {RequestStatusType} from \"../../../n1-main/m2-bll/app-reduser\";\r\nimport {DEV_VERSION} from \"../../../config\";\r\n\r\n\r\nexport const RecoveryPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const registeredEmail = useSelector<AppRootStateType, boolean>(state => state.recoveryPassword.registeredEmail)\r\n\r\n    const from = \"test-front-admin <ai73a@yandex.by>\"\r\n    const message = !DEV_VERSION\r\n        ? \"<div>password recovery link:<a\" +\r\n        \" href='http://localhost:3000/#/new-password/$token$'>link</a></div>\"\r\n        : \"<div>password recovery link:<a\" +\r\n        \" href='https://potapov-eo.github.io/friday-day/#/new-password/$token$'>link</a></div>\"\r\n\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        from?: string\r\n        message?: string\r\n    }\r\n    const disable = status === 'loading'\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n\r\n            dispatch(verificationEmailTC({email: values.email, from, message}))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    const {token} = useParams<{ token: string }>()\r\n\r\n    if (registeredEmail) {\r\n        return (\r\n            <div>\r\n                <div>Success!</div>\r\n                <div>Click the link in the message in your email</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return <div className=\"App\">\r\n\r\n        <form onSubmit={formik.handleSubmit}>\r\n            RecoveryPassword\r\n            <div>\r\n                <SuperInput\r\n                    placeholder={\"email\"}\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.email}\r\n                />\r\n                {formik.touched.email && formik.errors.email ?\r\n                    <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n            </div>\r\n\r\n            <SuperButton disabled={disable} type=\"submit\" name='Send'/>\r\n\r\n        </form>\r\n\r\n    </div>\r\n}","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getMe} from \"../f1-auth/a1-login/login-reducer\";\r\nimport {AppRootStateType} from \"../../n1-main/m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../n1-main/m1-ui/routes/Routes\";\r\nimport {setAppErrorAC, UserDataType} from \"../../n1-main/m2-bll/app-reduser\";\r\nimport s from \"./Profile.module.css\";\r\n\r\n\r\nexport const Profile = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n    const userData = useSelector<AppRootStateType, UserDataType>(state => state.app.UserData)\r\n   /* useEffect(() => {\r\n        if (isLoggedIn) {\r\n            dispatch(getMe())\r\n\r\n        }\r\n    }, [isLoggedIn])*/\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n\r\n    }\r\n     const avatar = \"https://www.gravatar.com/avatar/c37e0453882ec1e1d40bb4387e27b1dc?s=200&r=g&d=mm\"\r\n    return (\r\n\r\n        <div className={s.profile}>\r\n            <h1>PROFILE</h1>\r\n            <div className={s.profileContainer}>\r\n                <img className={s.avatar} src = {avatar}/>\r\n                {/* {userData.avatar} */}\r\n                <div className={s.info}>\r\n                    <div> Name: <span>{userData?userData.name:null}</span></div>\r\n                    <div> Email: <span>{userData?userData.email:null}</span></div>\r\n                    <div>Public Card Packs Count: <span>{userData?userData.publicCardPacksCount:null}</span></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {setAppErrorACType, setAppStatusAC, setAppStatusACType} from \"../../../n1-main/m2-bll/app-reduser\";\r\nimport {Dispatch} from \"redux\";\r\nimport {recoveryPasswordAPI} from \"../../../n1-main/m3-dal/instance\";\r\n\r\nconst initialState = {\r\n    newPassword: ''\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const newPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-PASSWORD\": {\r\n            return {...state, newPassword: action.newPassword}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setPasswordAC = (newPassword: string) => ({type: \"APP/SET-PASSWORD\", newPassword} as const)\r\n\r\nexport const setPasswordTC1 = (data: SetPasswordType) => {\r\n    return (dispatch: Dispatch) => {\r\n        recoveryPasswordAPI.setPassword(data).then(res => dispatch(setPasswordAC(data.password)))\r\n    }\r\n}\r\nexport const setPasswordTC = (data: SetPasswordType) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        return recoveryPasswordAPI.setPassword(data)\r\n            .then(res => {\r\n                dispatch(setPasswordAC(data.password))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport type SetPasswordType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setPasswordAC> | setAppStatusACType | setAppErrorACType","import React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"../../../n1-main/m2-bll/app-reduser\";\r\nimport SuperButton from \"../../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport SuperInput from \"../../../n1-main/m1-ui/common/SuperInput/SuperInput\";\r\nimport {setPasswordTC} from \"./newPassword-reducer\";\r\nimport {PATH} from \"../../../n1-main/m1-ui/routes/Routes\";\r\n\r\nexport const NewPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const newPassword = useSelector<AppRootStateType, string>(state => state.newPassword.newPassword)\r\n    type FormikErrorType = {\r\n        password?: string\r\n        resetPasswordToken?: string\r\n    }\r\n\r\n\r\n\r\n    let {token} = useParams<{token:string}>()\r\n    console.log(token)\r\n\r\n    const disable = status === 'loading'\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            password2: '',\r\n            resetPasswordToken: (token)\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'password Required';\r\n            } else if (values.password.length < 7) {\r\n                errors.password = 'length of passwords should be 7 and more simbols';\r\n            } else if (values.password2 !== values.password) {\r\n                errors.password = 'Passwords do not match';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(setPasswordTC({password: values.password, resetPasswordToken: values.resetPasswordToken}))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (newPassword) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        <form onSubmit={formik.handleSubmit}>\r\n            NewPassword\r\n            <div>\r\n                <SuperInput\r\n                    placeholder={\"password\"}\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password}\r\n                />\r\n                {formik.touched.password && formik.errors.password ?\r\n                    <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n            </div>\r\n            <div>\r\n                <SuperInput\r\n                    placeholder={\"confirm password\"}\r\n                    type=\"password\"\r\n                    name=\"password2\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password2}\r\n                />\r\n                {formik.touched.password2 && formik.errors.password2 ?\r\n                    <div style={{color: \"red\"}}>{formik.errors.password2}</div> : null}\r\n            </div>\r\n\r\n            <SuperButton disabled={disable} type=\"submit\" name='Send'/>\r\n\r\n        </form>\r\n    </div>\r\n}\r\n","import style from './Modal.module.css'\r\n\r\n\r\nexport let Modal = (props: { activeModal: boolean, setActiveModal: (activeModal: boolean) => void, children: any }) => {\r\n    return <div className={props.activeModal ? style.modal + ' ' + style.modalActive : style.modal} onClick={() => {\r\n        props.setActiveModal(false)\r\n    }}>\r\n        <div className={props.activeModal ? style.modalContant + ' ' + style.modalContantactive : style.modalContant}\r\n             onClick={e => {\r\n                 e.stopPropagation();\r\n                            }}>\r\n            {props.children}\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react'\r\nimport SuperButton from '../SuperButton/SuperButton'\r\n\r\nexport type BooleanFormPropsType = {\r\n    question?: string\r\n    push: (isDel: boolean) => void\r\n}\r\n\r\nexport const BooleanForm = React.memo(({question, push}: BooleanFormPropsType) => {\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const addItemTitle = (value: boolean) => {\r\n\r\n        push(value)\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>{question}</div>\r\n\r\n            <SuperButton onClick={() => addItemTitle(true)} name={\"YES\"}/>\r\n            <SuperButton onClick={() => addItemTitle(false)} name={\"NO\"}/>\r\n        </div>\r\n\r\n    )\r\n})","import React from 'react'\r\nimport {useFormik} from 'formik'\r\nimport SuperInput from \"../SuperInput/SuperInput\";\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\n\r\nexport type valueType = { question: string, answer: string }\r\ntype AddCardFormPropsType = {\r\n    addItem: (title: string) => void\r\n    buttonName: string\r\n    itemName: string\r\n    text?:string\r\n}\r\nexport const AddForm = React.memo((props: AddCardFormPropsType\r\n) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            values: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.values) {\r\n                errors.values = \"Required field\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm()\r\n            props.addItem(values.values)\r\n\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div>{props.text}</div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div><SuperInput name=\"values\" onChange={formik.handleChange} onBlur={formik.handleBlur}\r\n                                 type=\"text\"\r\n                                 value={formik.values.values} placeholder={props.itemName}/></div>\r\n                {formik.touched.values && formik.errors.values ?\r\n                    <div style={{color: \"red\"}}> {formik.errors.values} </div> : null}\r\n                <div><SuperButton name={props.buttonName}/></div>\r\n            </form>\r\n        </div>\r\n    )\r\n})\r\n\r\n//types\r\ntype FormikErrorType = {\r\n    values?: string\r\n}","import React, {useState} from 'react'\r\nimport s from '../Packs.module.css'\r\nimport SuperButton from \"../../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../n1-main/m1-ui/routes/Routes\";\r\nimport {removePackTC, updateTC} from \"../Packs-reduser\";\r\nimport {RequestStatusType} from \"../../../n1-main/m2-bll/app-reduser\";\r\nimport {Modal} from '../../..//n1-main/m1-ui/common/Modal/Modal'\r\nimport {BooleanForm} from \"../../../n1-main/m1-ui/common/BooleanModal/BooleanForm\";\r\nimport {AddForm} from \"../../../n1-main/m1-ui/common/AddForm/AddForm\";\r\n\r\n\r\ntype packPropsType = {\r\n    name: string\r\n    cardsCount?: number\r\n    updated?: string\r\n    pack_id: string\r\n    userId: string\r\n    activeModal: boolean\r\n    setActiveModal: (activeModal: boolean) => void\r\n}\r\nexport const Pack = (props: packPropsType) => {\r\n    const [activeUpdatePackModal, setActiveUpdatePackModal] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const registerUserId = useSelector<AppRootStateType, string>(state => state.app.UserData ? state.app.UserData._id : \"\")\r\n    const isMyPack = (props.userId === registerUserId) && !(status === 'loading')\r\n    const [activeDelPackModal, setActiveDelPackModal] = useState<boolean>(false)\r\n    const del = (isDel: boolean) => {\r\n        setActiveDelPackModal(false)\r\n        isDel && dispatch(removePackTC(props.pack_id))\r\n    }\r\n\r\n    const updatePack = (newNamePack: string) => {\r\n        debugger\r\n        dispatch(updateTC(props.pack_id, newNamePack))\r\n        setActiveUpdatePackModal(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.tableString} key={props.pack_id}>\r\n                <div>{props.name} </div>\r\n                <div>{props.cardsCount}</div>\r\n                <div>{props.updated}</div>\r\n                <div><SuperButton disabled={!isMyPack} onClick={() => {\r\n                    setActiveDelPackModal(true)\r\n                }} name={\"del\"}/></div>\r\n                <div><SuperButton disabled={!isMyPack} name={\"update\"} onClick={() => {\r\n                    setActiveUpdatePackModal(true)\r\n                }}/></div>\r\n                <div><NavLink to={`${PATH.CARDS}/${props.pack_id}`} activeClassName={s.activeLink}>CARDS</NavLink></div>\r\n                <div><NavLink to={`${PATH.LEARN}/${props.pack_id}`} activeClassName={s.activeLink}>Learn</NavLink></div>\r\n            </div>\r\n\r\n            <Modal activeModal={activeUpdatePackModal} setActiveModal={setActiveUpdatePackModal}>\r\n                {/* <AddItemForm addItem={updatePack} buttonName={\"update\"}/>*/}\r\n                <AddForm addItem={updatePack} buttonName={\"update\"} itemName={\"new name\"} text={\"Enter new name\"}/>\r\n            </Modal>\r\n            <Modal activeModal={activeDelPackModal} setActiveModal={setActiveDelPackModal}>\r\n                <BooleanForm question={`you want to remove the pack with the name: \"${props.name}\". Are you sure`}\r\n                             push={del}/>\r\n            </Modal>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport s from './SortButtons.module.css'\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {faSortDown, faSortUp} from '@fortawesome/free-solid-svg-icons'\r\nimport {getCardPacksTC, setPaginationAC} from '../../../../n2-features/f5-packs/Packs-reduser'\r\nimport {useDispatch} from 'react-redux'\r\n\r\nexport const SortButtons = (props: { param: string }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const sortUp = (param: string) => {\r\n        dispatch(setPaginationAC({sortPacks: `1` + param}))\r\n        dispatch(getCardPacksTC())\r\n    }\r\n    const sortDown = (param: string) => {\r\n        dispatch(setPaginationAC({sortPacks: `0` + param}))\r\n        dispatch(getCardPacksTC())\r\n    }\r\n    return <div className={s.tableSortIcons}>\r\n        <a type=\"submit\" onClick={() => sortUp(props.param)}><FontAwesomeIcon icon={faSortUp} size=\"1x\"/></a>\r\n        <a type=\"submit\" onClick={() => sortDown(props.param)}><FontAwesomeIcon icon={faSortDown} size=\"1x\"/></a>\r\n    </div>\r\n}\r\n","import React, {useState} from \"react\";\r\nimport styles from './Paginator.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize: number\r\n}\r\n\r\nexport const Paginator = (props: PropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize)\r\n\r\n    let pages = []\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / props.portionSize)\r\n    let [portionNumber, setPortionNumber] = useState<number>(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * props.portionSize\r\n\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {\r\n                portionNumber > 1 &&\r\n                <button onClick={() => setPortionNumber(portionNumber - 1)}>Previous </button>\r\n            }\r\n            {\r\n                pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map(p => {\r\n                        return <span\r\n                            className={props.currentPage === p ? `${styles.coursor && styles.selectedPage}` : `'' ${styles.coursor} `}\r\n                            onClick={() => {\r\n                                props.onPageChanged(p)\r\n                            }}\r\n                        > {p} </span>\r\n                    })\r\n            }\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)}>Next</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../../src/n1-main/m2-bll/store'\r\nimport {addCardPacksTC, getCardPacksTC, PackType, setPaginationAC} from './/Packs-reduser'\r\nimport s from './Packs.module.css'\r\nimport SuperButton from \"../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport {Pack} from \"./pack/Pack\";\r\nimport {RequestStatusType} from \"../../n1-main/m2-bll/app-reduser\";\r\nimport {SortButtons} from '../../n1-main/m1-ui/common/SortButtons/SortButtons'\r\nimport {Paginator} from \"../../n1-main/m1-ui/common/Paginator/Paginator\";\r\nimport {Modal} from '../../n1-main/m1-ui/common/Modal/Modal'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../n1-main/m1-ui/routes/Routes\";\r\nimport {AddForm} from \"../../n1-main/m1-ui/common/AddForm/AddForm\";\r\n\r\n\r\nexport const Packs = (props: { activeModal: boolean, setActiveModal: (activeModal: boolean) => void }) => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n    const userId = useSelector<AppRootStateType, string>(state => state.app.UserData ? state.app.UserData._id : \"\")\r\n    const cardPacks = useSelector<AppRootStateType, Array<PackType>>(state => state.packs.cardPacks)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const page = useSelector<AppRootStateType, number>(state => state.packs.pagination.page)\r\n\r\n    const dispatch = useDispatch()\r\n    const [isChange, setIsChange] = useState<boolean>(false)\r\n    const [idTimeout, setIdTimeout] = useState<number>(0)\r\n    const [searchName, setSearchName] = useState<string>(\"\")\r\n    const [activeAddPackModal, setActiveAddPackModal] = useState<boolean>(false)\r\n    const isLoading = status === 'loading'\r\n\r\n    const setChange = useCallback(() => {\r\n        clearTimeout(idTimeout)\r\n        const id = window.setTimeout(() => {\r\n            setIsChange(true)\r\n            setIdTimeout(0)\r\n        }, 1500)\r\n        setIdTimeout(id)\r\n    }, [idTimeout])\r\n\r\n    useEffect(() => {\r\n        if (isChange && !isLoading) {\r\n            dispatch(setPaginationAC({packName: searchName}))\r\n            dispatch(getCardPacksTC())\r\n            setIsChange(false)\r\n        }\r\n    }, [setChange, isChange, setIsChange, setPaginationAC, isLoading])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (isLoggedIn) {\r\n            dispatch(getCardPacksTC())\r\n        }\r\n    }, [isLoggedIn])\r\n\r\n    const change = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.checked) {\r\n            dispatch(setPaginationAC({user_id: userId}))\r\n            dispatch(getCardPacksTC())\r\n\r\n        } else {\r\n            dispatch(setPaginationAC({user_id: \"\"}))\r\n            dispatch(getCardPacksTC())\r\n        }\r\n    }\r\n\r\n    const addPack = (newPackName: string) => {\r\n        dispatch(addCardPacksTC(newPackName))\r\n        setActiveAddPackModal(false)\r\n    }\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchName(e.currentTarget.value)\r\n        setChange()\r\n    }\r\n\r\n    const pageSize = useSelector<AppRootStateType, number>(state => state.packs.pagination.pageCount)\r\n    const totalItemsCount = useSelector<AppRootStateType, number>(state => state.packs.totalPacksCount)\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(setPaginationAC({page: pageNumber}))\r\n        dispatch(getCardPacksTC())\r\n    }\r\n    /*if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n\r\n    }*/\r\n\r\n    return (\r\n\r\n        <div className={s.table}>\r\n            <h1>Packs</h1>\r\n            <div> my Pack <input type={\"checkbox\"} onChange={change}/></div>\r\n            <div>\r\n                <Paginator currentPage={page} pageSize={pageSize} totalItemsCount={totalItemsCount} portionSize={10}\r\n                           onPageChanged={onPageChanged}/>\r\n            </div>\r\n\r\n            <div> Pack name search: <input value={searchName} onChange={onChangeCallback}/></div>\r\n            {isLoggedIn ? <div className={s.tableString}>\r\n\r\n\r\n                <div className={s.tableColumnTitle}>\r\n                    <SortButtons param=\"name\"/>\r\n                    <h2> Name</h2>\r\n                </div>\r\n                <div className={s.tableColumnTitle}>\r\n                    <SortButtons param=\"cardsCount\"/>\r\n                    <h2> CardsCount</h2>\r\n                </div>\r\n                <div className={s.tableColumnTitle}>\r\n                    <SortButtons param=\"updated\"/>\r\n                    <h2> Updated</h2>\r\n                </div>\r\n                <div><SuperButton onClick={() => {\r\n                    setActiveAddPackModal(true)\r\n                }} name={\"add\"}/></div>\r\n                <div className={s.tableColumnTitle}></div>\r\n                <div className={s.tableColumnTitle}><h2> Cards</h2></div>\r\n                <div className={s.tableColumnTitle}><h2> Learn</h2></div>\r\n\r\n            </div> : <div>\"you are not authorized\"</div>}\r\n\r\n            <Modal activeModal={activeAddPackModal} setActiveModal={setActiveAddPackModal}>\r\n                {/* <AddItemForm addItem={addPack} buttonName={\"add\"}/>*/}\r\n                <AddForm addItem={addPack} buttonName={\"ADD PACK\"} itemName={\"pack name\"}\r\n                         text={\"enter the name of the new pack\"}/>\r\n            </Modal>\r\n\r\n            {cardPacks.map(packs =>\r\n                <Pack name={packs.name} cardsCount={packs.cardsCount} updated={packs.updated?.slice(0,10)} pack_id={packs._id}\r\n                      userId={packs.user_id} activeModal={props.activeModal} setActiveModal={props.setActiveModal}/>\r\n            )}\r\n\r\n            <Paginator currentPage={page} pageSize={pageSize} totalItemsCount={totalItemsCount} portionSize={10}\r\n                       onPageChanged={onPageChanged}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport {useFormik} from 'formik'\r\nimport SuperInput from \"../SuperInput/SuperInput\";\r\nimport SuperButton from \"../SuperButton/SuperButton\";\r\n\r\nexport type valueType = { question: string, answer: string }\r\ntype AddCardFormPropsType = {\r\n\r\n    addCard: (value: valueType) => void\r\n    text?:string\r\n}\r\nexport const AddCardForm = React.memo((props: AddCardFormPropsType\r\n) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            question: \"\",\r\n            answer: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.question) {\r\n                errors.question = \"Required field\"\r\n            }\r\n            if (!values.answer) {\r\n                errors.answer = \"Required field\"\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            formik.resetForm()\r\n            props.addCard(values)\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div>{props.text}</div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div><SuperInput name=\"question\" onChange={formik.handleChange} onBlur={formik.handleBlur} type=\"text\"\r\n                                 value={formik.values.question} placeholder={\"question\"}/></div>\r\n                {formik.touched.question && formik.errors.question ?\r\n                    <div style={{color: \"red\"}}> {formik.errors.question} </div> : null}\r\n                <div><SuperInput name=\"answer\" onChange={formik.handleChange} onBlur={formik.handleBlur}\r\n                                 type=\"answer\" value={formik.values.answer} placeholder={\"answer\"}/></div>\r\n                {formik.touched.answer && formik.errors.answer ?\r\n                    <div style={{color: \"red\"}}> {formik.errors.answer} </div> : null}\r\n\r\n                <div><SuperButton name=\"ADD\"/></div>\r\n            </form>\r\n        </div>\r\n    )\r\n})\r\n\r\n//types\r\ntype FormikErrorType = {\r\n    question?: string\r\n    answer?: string\r\n\r\n}","import React, {useState} from 'react'\r\nimport s from '../../f5-packs/Packs.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {CardType, removeCardTC, updateCardTC} from \"../Cards-reducer\";\r\nimport {RequestStatusType} from \"../../../n1-main/m2-bll/app-reduser\";\r\nimport SuperButton from \"../../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport {Modal} from \"../../../n1-main/m1-ui/common/Modal/Modal\";\r\nimport {BooleanForm} from \"../../../n1-main/m1-ui/common/BooleanModal/BooleanForm\";\r\nimport {AddCardForm, valueType} from \"../../../n1-main/m1-ui/common/AddCardForm/AddCardForm\";\r\n\r\ntype cardPropsType = {\r\n    card: CardType\r\n}\r\nexport const Card = (props: cardPropsType) => {\r\n    const card = props.card\r\n    const dispatch = useDispatch()\r\n    const [activeAddCardModal, setActiveAddCardModal] = useState<boolean>(false)\r\n    const [activeDelPackModal, setActiveDelPackModal] = useState<boolean>(false)\r\n    const registerUserId = useSelector<AppRootStateType, string>(state => state.app.UserData ? state.app.UserData._id : \"\")\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isMyPack = (card.user_id === registerUserId) && !(status === 'loading')\r\n    const removeCard = (isDel: boolean) => {\r\n        setActiveDelPackModal(false)\r\n        isDel && dispatch(removeCardTC(card.cardsPack_id, card._id))\r\n    }\r\n    const updatedCard = (value: valueType) => {\r\n        setActiveAddCardModal(false)\r\n        dispatch(updateCardTC(card._id, value))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.tableString} key={card._id}>\r\n                <div>{card.question}</div>\r\n                <div>{card.answer}</div>\r\n                <div>{card.grade}</div>\r\n                <div>{card.updated.slice(0,10)}</div>\r\n                <div><SuperButton disabled={!isMyPack} onClick={() => {\r\n                    setActiveDelPackModal(true)\r\n                }} name={\"del\"}/></div>\r\n\r\n                <div>\r\n                    <SuperButton disabled={!isMyPack} onClick={() => setActiveAddCardModal(true)} name={\"update\"}/>\r\n                </div>\r\n\r\n            </div>\r\n            <Modal activeModal={activeDelPackModal} setActiveModal={setActiveDelPackModal}>\r\n                <BooleanForm question={`you want to remove the card with the question: \"${card.question}\"`}\r\n                             push={removeCard}/>\r\n            </Modal>\r\n            <Modal activeModal={activeAddCardModal} setActiveModal={setActiveAddCardModal}>\r\n                <AddCardForm addCard={updatedCard} text={\"Enter new question and new answer\"}/>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"../../n1-main/m2-bll/app-reduser\";\r\nimport {NavLink, Redirect, useParams} from \"react-router-dom\";\r\nimport s from \"../f5-packs/Packs.module.css\";\r\nimport {addCardTC, CardType, getCardTC, setCurrentIdAC, setCurrentPageAC} from \"./Cards-reducer\";\r\nimport {Card} from \"./card/Card\";\r\nimport {PackType} from \"../f5-packs/Packs-reduser\";\r\nimport {Paginator} from \"../../n1-main/m1-ui/common/Paginator/Paginator\";\r\nimport SuperButton from \"../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport {Modal} from '../../n1-main/m1-ui/common/Modal/Modal'\r\nimport {PATH} from \"../../n1-main/m1-ui/routes/Routes\";\r\nimport {AddCardForm, valueType} from \"../../n1-main/m1-ui/common/AddCardForm/AddCardForm\";\r\n\r\nexport const Cards = () => {\r\n    const [activeAddCardModal, setActiveAddCardModal] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token: string }>()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const registerUserId = useSelector<AppRootStateType, string>(state => state.app.UserData ? state.app.UserData._id : \"\")\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n    const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards.cards)\r\n    const packs = useSelector<AppRootStateType, Array<PackType>>(state => state.packs.cardPacks)\r\n    const page = useSelector<AppRootStateType, number>(state => state.cards.paginationCards.page)\r\n    const pageSize = useSelector<AppRootStateType, number>(state => state.cards.paginationCards.pageCount)\r\n    const totalItemsCount = useSelector<AppRootStateType, number>(state => state.cards.totalCardsCount)\r\n    const [redirect, setRedirect] = useState<boolean>(false);\r\n    const [firstRendering, setFirstRendering] = useState<boolean>(true);\r\n    const pack = packs.find(p => p._id === token)\r\n    const createdUserId = pack ? pack.user_id : registerUserId\r\n    const isMyPack = (createdUserId === registerUserId) && !(status === 'loading')\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (isLoggedIn && token) {\r\n            dispatch(setCurrentIdAC(token))\r\n            dispatch(getCardTC())\r\n        }\r\n    }, [isLoggedIn,token])\r\n\r\n    /*if (redirect && !isLoggedIn) return <Redirect to={PATH.LOGIN}/>\r\n    if (redirect && !token) return <Redirect to={PATH.PACK}/>*/\r\n\r\n    const addCard = (value: valueType) => {\r\n        dispatch(addCardTC(token, value))\r\n        setActiveAddCardModal(false)\r\n    }\r\n\r\n    const onPageChanged = (newNumber: number) => {\r\n        dispatch(setCurrentPageAC(newNumber))\r\n        dispatch(getCardTC())\r\n    }\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={s.table}>\r\n            <h1>Cards</h1>\r\n            {token && (cards.length > 0) &&\r\n            <h2><NavLink to={`${PATH.LEARN}/${token}`} activeClassName={s.activeLink}>Learn</NavLink></h2>}\r\n            <div>\r\n                <Paginator currentPage={page} pageSize={pageSize} totalItemsCount={totalItemsCount} portionSize={3}\r\n                           onPageChanged={onPageChanged}/>\r\n            </div>\r\n            {token ? <div className={s.tableString}>\r\n\r\n                <div>question</div>\r\n                <div>answer</div>\r\n                <div>grade</div>\r\n                <div>updated</div>\r\n                <div>\r\n                    <SuperButton onClick={() => {\r\n                        setActiveAddCardModal(true)\r\n                    }} disabled={!isMyPack} name={\"add\"}/>\r\n                </div>\r\n\r\n\r\n            </div> : <div>\"Необходимо выбрать колоду\"</div>}\r\n\r\n            {token ? cards.map(card =>\r\n                <Card card={card}/>\r\n            ) : <div></div>}\r\n\r\n            <Modal activeModal={activeAddCardModal} setActiveModal={setActiveAddCardModal}>\r\n                <AddCardForm addCard={addCard} text={\"Enter question and answer of new card\"}/>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"../../n1-main/m2-bll/app-reduser\";\r\nimport {CardType, getCardTC, gradeCardTC, setCurrentIdAC} from \"../f6-cards/Cards-reducer\";\r\nimport SuperButton from \"../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport s from \"../f5-packs/Packs.module.css\";\r\n\r\n\r\ntype LearnPropsType = {}\r\nexport const Learn = (props: LearnPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token: string }>()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards.cards)\r\n    const [isChecked, setIsChecked] = useState<boolean>(false)\r\n    const [first, setFirst] = useState<boolean>(true)\r\n    const [card, setCard] = useState<CardType | null>(null)\r\n\r\n    const getCard = (cards: CardType[]) => {\r\n        const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n        const rand = Math.random() * sum;\r\n        const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n                const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n                return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n            }\r\n            , {sum: 0, id: -1});\r\n        console.log('test: ', sum, rand, res)\r\n\r\n        return cards[res.id + 1];\r\n    }\r\n    const grades = ['не знал', 'забыл', 'долго думал', 'перепутал', 'знал'];\r\n\r\n    useEffect(() => {\r\n        if (first && token) {\r\n            dispatch(setCurrentIdAC(token))\r\n            dispatch(getCardTC())\r\n            setFirst(false);\r\n        }\r\n        if (cards.length > 0) setCard(getCard(cards));\r\n    }, [dispatch, token, cards, first])\r\n\r\n    const onNext = () => {\r\n        setIsChecked(false);\r\n\r\n        if (cards.length > 0) {\r\n            // dispatch\r\n            setCard(getCard(cards));\r\n        } else {\r\n\r\n        }\r\n    }\r\n    const setGrade = (i: number) => {\r\ndebugger\r\n        dispatch(gradeCardTC(i + 1, card ? card._id : \"\"))\r\n        setCard(getCard(cards))\r\n        setIsChecked(false);\r\n\r\n        if (cards.length > 0) {\r\n            // dispatch\r\n            setCard(getCard(cards));\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            LearnPage\r\n\r\n            {token ? <div>\r\n                <div>QUESTION: {card ? card.question : \"\"}</div>\r\n                <div>\r\n                    <SuperButton name={\"check\"} onClick={() => setIsChecked(true)}/>\r\n                </div>\r\n            </div> : <div>\"НЕОБХОДИМО ВЫБРАТЬ КОЛОДУ\"</div>}\r\n\r\n            {isChecked && (\r\n                <>\r\n                    <div> ANSWER: {card ? card.answer : \"\"}</div>\r\n\r\n                    {grades.map((g, i) => (\r\n                        <SuperButton name={g} key={'grade-' + i} onClick={() => setGrade(i)}/>\r\n                    ))}\r\n\r\n                    <div><SuperButton name={\"next\"} onClick={onNext}/></div>\r\n                </>\r\n            )}\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Error404} from \"../../../n2-features/f4-404/Error404\";\r\nimport {Test} from \"../../../n2-features/f0-test/test\";\r\nimport {Login} from \"../../../n2-features/f1-auth/a1-login/LoginFormik\";\r\nimport {Register} from \"../../../n2-features/f1-auth/a2-register/Register\";\r\nimport {RecoveryPassword} from \"../../../n2-features/f1-auth/a3-recoveryPassword/RecoveryPassword\";\r\nimport {Profile} from \"../../../n2-features/f2-profile/Profile\";\r\nimport {NewPassword} from \"../../../n2-features/f1-auth/a4-newPassword/NewPassword\";\r\nimport { Packs } from '../../../n2-features/f5-packs/Packs';\r\nimport {Cards} from \"../../../n2-features/f6-cards/Cards\";\r\nimport {Learn} from \"../../../n2-features/f6-learn/Learn\";\r\n\r\n\r\nexport const PATH = {\r\n    HOME: \"/home\",\r\n    TEST: \"/test\",\r\n    LOGIN: \"/login\",\r\n    REGISTER: \"/register\",\r\n    RECOVERY_PASSWORD: \"/recovery-password\",\r\n    NEW_PASSWORD: \"/new-password\",\r\n    PROFILE: \"/profile\",\r\n    PACK: \"/packs\",\r\n    CARDS: \"/cards\",\r\n    LEARN:\"/learn\"\r\n}\r\n\r\nexport const Routes = () => {\r\n    let [activeModal, setActiveModal] = useState<boolean>(false) \r\n    return (\r\n        <div>\r\n\r\n            <Switch>\r\n\r\n                <Route path={\"/\"} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n                <Route path={PATH.TEST} render={() => <Test/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n                <Route path={PATH.RECOVERY_PASSWORD} render={() => <RecoveryPassword/>}/>\r\n                <Route path={`${PATH.NEW_PASSWORD}/:token`} render={() => <NewPassword/> }/>\r\n                <Route path={PATH.NEW_PASSWORD} exact render={ () => <RecoveryPassword/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.PACK} render={() => <Packs activeModal={activeModal} setActiveModal={setActiveModal}/>}/>\r\n                <Route path={`${PATH.CARDS}/:token`} render={() => <Cards/>}/>\r\n                <Route path={PATH.CARDS} render={() => <Cards/>}/>\r\n                <Route path={`${PATH.LEARN}/:token`} render={() => <Learn/>}/>\r\n                <Route path={PATH.LEARN} render={() => <Learn/>}/>\r\n                <Route render={() => <Error404/>}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import style from './ErrorSnackBar.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppErrorAC} from \"../../../m2-bll/app-reduser\";\r\n\r\ntype ErrorSnackBarPropsType = {\r\n    errorMessage: string\r\n}\r\n\r\nexport const ErrorSnackBar = (props: ErrorSnackBarPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = () => dispatch(setAppErrorAC(null))\r\n\r\n    return (\r\n        <div className={style.notification}>\r\n        <div className={style.text}> {props.errorMessage} </div>\r\n        <div className={`${style.close}`}>\r\n            <div className={style.text} onClick={onClickHandler}>X</div>\r\n        </div>\r\n    </div>)\r\n};\r\n\r\n","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./nav.module.css\"\r\nimport {PATH} from \"../../routes/Routes\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\n\r\nexport const Nav = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n    return (\r\n\r\n        <div className={s.nav}>\r\n\r\n\r\n           {/* <span>\r\n                <NavLink to={PATH.TEST} activeClassName={s.activeLink}>TEST</NavLink>\r\n            </span>*/}\r\n            {!isLoggedIn && <>\r\n               <span>\r\n                <NavLink to={PATH.LOGIN} activeClassName={s.activeLink}>LOGIN</NavLink>\r\n            </span>\r\n                <span>\r\n                <NavLink to={PATH.REGISTER} activeClassName={s.activeLink}>REGISTER</NavLink>\r\n            </span>\r\n                <span>\r\n                <NavLink to={PATH.RECOVERY_PASSWORD} activeClassName={s.activeLink}>RECOVERY_PASSWORD</NavLink>\r\n            </span>\r\n                <span>\r\n                <NavLink to={PATH.NEW_PASSWORD} activeClassName={s.activeLink}>NEW_PASSWORD</NavLink>\r\n            </span>\r\n            </>}\r\n            {isLoggedIn && <> <span>\r\n                <NavLink to={PATH.PROFILE} activeClassName={s.activeLink}>PROFILE</NavLink>\r\n            </span>\r\n                <span>\r\n                <NavLink to={PATH.PACK} activeClassName={s.activeLink}>PACKS</NavLink>\r\n            </span>\r\n                <span>\r\n                <NavLink to={PATH.CARDS} activeClassName={s.activeLink}>CARDS</NavLink>\r\n            </span>\r\n                <span>\r\n                <NavLink to={PATH.LEARN} activeClassName={s.activeLink}>LEARN</NavLink>\r\n            </span>\r\n            </>}\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react'\r\nimport s from \"./Header.module.css\"\r\nimport {Nav} from \"./nav/nav\";\r\nimport SuperButton from '../../../n1-main/m1-ui/common/SuperButton/SuperButton';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {logout} from '../../../n2-features/f1-auth/a1-login/login-reducer'\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faDAndD} from \"@fortawesome/free-brands-svg-icons\"\r\nimport {setDevVersionAC} from \"../../m2-bll/app-reduser\";\r\n\r\n\r\nexport const Header = () => {\r\n    const dispatch = useDispatch()\r\n    const UserName = useSelector<AppRootStateType, string | null>(state => state.app.UserData ? state.app.UserData.name : null)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n    const dev = useSelector<AppRootStateType, boolean>(state => state.app.devVersion)// для переключения м-ду локальным бэком и хироку\r\n    const changeDev = (e: ChangeEvent<HTMLInputElement>) => {dispatch(setDevVersionAC(e.currentTarget.checked))\r\n    }\r\n    const logoutOnClick = () => {\r\n        const thunk = logout()\r\n        dispatch(thunk)\r\n    }\r\n\r\n    return (\r\n        <div className={s.header}>\r\n           {/* <div className={s.devInput}><input type={\"checkbox\"}\r\n                                               onChange={changeDev}/> {dev ? \"https://neko-back.herokuapp.com/2.0\" : \"http://localhost:7542/2.0/\"}\r\n            </div>*/}\r\n            <FontAwesomeIcon icon={faDAndD} size=\"4x\"/>\r\n            <Nav/>\r\n\r\n\r\n            <div className={s.burger}>\r\n                <a href=\"\" className={s.a}>\r\n                    <span className={s.burgerToggle}>\r\n                        <span className={s.nk1}></span>\r\n                        <span className={s.nk2}></span>\r\n                        <span className={s.nk3}></span>\r\n                    </span>\r\n                </a>\r\n            </div>\r\n            {isLoggedIn && < SuperButton onClick={logoutOnClick} name=\"logout\"/>}\r\n            {isLoggedIn &&\r\n            <div style={{margin: \"10px\", color: \"#e08821\", fontWeight: \"bold\", fontSize: \"20px\"}}> {UserName} </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from \"../m2-bll/store\";\r\nimport {RequestStatusType} from \"../m2-bll/app-reduser\";\r\nimport Preloader from \"./common/Preloder/Preloader\";\r\nimport {Routes} from \"./routes/Routes\";\r\nimport {ErrorSnackBar} from \"./common/ErrorSnackBar/ErrorSnackBar\";\r\nimport {Header} from \"./header/Header\";\r\nimport {getMe, setIsLoggedIn} from \"../../n2-features/f1-auth/a1-login/login-reducer\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    let [firstRendering, setFirstRendering] = useState<boolean>(true)\r\n\r\n    useEffect(() => {\r\n        if (firstRendering) {\r\n            dispatch(setIsLoggedIn(false))\r\n            dispatch(getMe())\r\n            setFirstRendering(false)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <HashRouter>\r\n                <Header/>\r\n                {status === 'loading' && <Preloader/>}\r\n                <Routes/>\r\n                {error && <ErrorSnackBar errorMessage={error}/>}\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {loginReducer} from \"../../n2-features/f1-auth/a1-login/login-reducer\";\r\nimport {registerReducer} from \"../../n2-features/f1-auth/a2-register/register-reducer\";\r\nimport {recoveryPasswordReducer} from \"../../n2-features/f1-auth/a3-recoveryPassword/recoveryPassword-reducer\";\r\nimport {newPasswordReducer} from \"../../n2-features/f1-auth/a4-newPassword/newPassword-reducer\";\r\nimport {packsReducer} from \"../../n2-features/f5-packs/Packs-reduser\";\r\nimport {appReducer} from \"./app-reduser\";\r\nimport {cardsReducer} from \"../../n2-features/f6-cards/Cards-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    login:loginReducer,\r\n    register:registerReducer,\r\n    recoveryPassword:recoveryPasswordReducer,\r\n    newPassword:newPasswordReducer,\r\n    app:appReducer,\r\n    packs:packsReducer,\r\n    cards: cardsReducer\r\n\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1-main/m1-ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from \"./n1-main/m2-bll/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}