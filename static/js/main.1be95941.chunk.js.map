{"version":3,"sources":["n2-features/f5-packs/Packs.module.css","n1-main/m1-ui/header/nav/nav.module.css","n1-main/m1-ui/header/Header.module.css","n2-features/f2-profile/Profile.module.css","n1-main/m1-ui/common/Paginator/Paginator.module.css","n1-main/m1-ui/common/ErrorSnackBar/ErrorSnackBar.module.css","n1-main/m1-ui/common/SuperButton/SuperButton.module.css","n1-main/m1-ui/common/SuperInput/SuperInput.module.css","n1-main/m1-ui/common/Preloder/Preloader.module.css","n1-main/m1-ui/common/SortButtons/SortButtons.module.css","n1-main/m1-ui/common/images/Infinity-1s-200px.svg","n1-main/m1-ui/common/Preloder/Preloader.tsx","n2-features/f4-404/Error404.tsx","n1-main/m1-ui/common/SuperButton/SuperButton.tsx","n1-main/m1-ui/common/SuperInput/SuperInput.tsx","n2-features/f0-test/test.tsx","n1-main/m3-dal/instance.ts","n1-main/m2-bll/app-reduser.ts","n2-features/f5-packs/Packs-reduser.ts","n2-features/f6-cards/Cards-reducer.ts","n2-features/f1-auth/a1-login/login-reducer.ts","n2-features/f1-auth/a1-login/LoginFormik.tsx","n2-features/f1-auth/a2-register/register-reducer.ts","n2-features/f1-auth/a2-register/Register.tsx","n2-features/f1-auth/a3-recoveryPassword/recoveryPassword-reducer.ts","n2-features/f1-auth/a3-recoveryPassword/RecoveryPassword.tsx","n2-features/f2-profile/Profile.tsx","n2-features/f1-auth/a4-newPassword/newPassword-reducer.ts","n2-features/f1-auth/a4-newPassword/NewPassword.tsx","n2-features/f5-packs/pack/Pack.tsx","n1-main/m1-ui/common/SortButtons/SortButtons.tsx","n1-main/m1-ui/common/Paginator/Paginator.tsx","n2-features/f5-packs/Packs.tsx","n2-features/f6-cards/card/Card.tsx","n2-features/f6-cards/Cards.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/common/ErrorSnackBar/ErrorSnackBar.tsx","n1-main/m1-ui/header/nav/nav.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/App.tsx","reportWebVitals.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","Preloader","className","style","pre","src","preloader","height","Error404","alt","SuperButton","name","restProps","s","button","SuperInput","input","Test","type","instance","axios","create","baseURL","withCredentials","AuthAPI","post","email","password","rememberMe","delete","RegisterAPI","data","recoveryPasswordAPI","CardsAPI","paginationData","get","params","cardsPack","idCarsPack","id","put","_id","paginationCardsData","cardsPack_ida","card","cardsPack_id","cardId","question","initialState","status","error","UserData","avatar","publicCardPacksCount","created","updated","isAdmin","verified","isLoggedIn","devVersion","setAppStatusAC","setAppErrorAC","receivedResponseAC","userData","cardPacks","pagination","packName","min","max","sortPacks","page","pageCount","user_id","totalPacksCount","setCardPacksAC","setPaginationAC","property","setTotalPacksCountAC","packsCount","setCurrentPageAC","currentPage","getCardPacksTC","getData","dispatch","getState","a","packs","response","cardPacksTotalCount","setIsLoggedIn","message","cards","paginationCards","cardAnswer","cardQuestion","sortCards","totalCardsCount","setCardAC","getCardTC","cardsTotalCount","value","Login","useSelector","state","app","useDispatch","disable","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","mail","remember_Me","thunk","resetForm","to","PATH","PROFILE","handleSubmit","onChange","handleChange","onBlur","handleBlur","placeholder","touched","color","checked","disabled","isRegister","Register","register","password2","length","LOGIN","registeredEmail","RecoveryPassword","recoveryPassword","from","then","res","success","catch","e","useParams","token","Profile","profile","profileContainer","info","newPassword","setPasswordAC","NewPassword","console","log","resetPasswordToken","Pack","props","registerUserId","isMyPack","userId","tableString","cardsCount","onClick","pack_id","getResponse","CARDS","activeClassName","activeLink","SortButtons","tableSortIcons","param","icon","faSortUp","size","faSortDown","Paginator","pagesCount","Math","ceil","totalItemsCount","pageSize","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","filter","p","map","coursor","selectedPage","onPageChanged","Packs","isChange","setIsChange","idTimeout","setIdTimeout","searchName","setSearchName","isLoading","setChange","useCallback","clearTimeout","window","setTimeout","useEffect","pageNumber","table","currentTarget","tableColumnTitle","Card","answer","grade","Cards","pack","find","newNumber","HOME","TEST","REGISTER","RECOVERY_PASSWORD","NEW_PASSWORD","PACK","Routes","path","exact","render","ErrorSnackBar","notification","text","errorMessage","close","Nav","nav","Header","UserName","header","faDAndD","burger","href","burgerToggle","nk1","nk2","nk3","margin","fontWeight","fontSize","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","login","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1be95941.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Packs_table__2Naa-\",\"tableString\":\"Packs_tableString__mwSXx\",\"tableColumnTitle\":\"Packs_tableColumnTitle__3VRAv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav_nav__1K_HG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__P8m-Z\",\"burgerToggle\":\"Header_burgerToggle__3gMSP\",\"nk1\":\"Header_nk1__1mUjG\",\"nk3\":\"Header_nk3__2JrMK\",\"nk2\":\"Header_nk2__A8gP4\",\"devInput\":\"Header_devInput__1e_Y_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__AOdLM\",\"profileContainer\":\"Profile_profileContainer__1GNWh\",\"info\":\"Profile_info__bWyEn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__DEW0s\",\"pageNumber\":\"Paginator_pageNumber__tlVzE\",\"selectedPage\":\"Paginator_selectedPage__2ULFC\",\"coursor\":\"Paginator_coursor__2H2t0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"ErrorSnackBar_notification__N4HPG\",\"text\":\"ErrorSnackBar_text__2glv8\",\"close\":\"ErrorSnackBar_close__1paLn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SuperButton_button__1JisP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInput_input__1p_BM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pre\":\"Preloader_pre__3-i-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableSortIcons\":\"SortButtons_tableSortIcons__3gyjZ\"};","export default __webpack_public_path__ + \"static/media/Infinity-1s-200px.2a677e42.svg\";","import React from 'react';\r\nimport style from './Preloader.module.css'\r\nimport preloader from '../images/Infinity-1s-200px.svg'\r\n\r\n\r\nlet Preloader = () => {\r\n    return <div className={style.pre} >\r\n        <img src={preloader}  style={ { height: 200 } }/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;\r\n","import React from 'react'\n\n\nexport const Error404 = () => {\n    return (\n        <div className=\"App\">\n            <div>404</div>\n            <img src=\"https://programmist1s.ru/wp-content/uploads/2013/09/Pole-ob'ekta-nedostupno-dlya-zapisi-1S.jpg\"\n                 alt=\"404\"/>\n            <div>Page not found!</div>\n        </div>\n    )\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\nimport s from \"./SuperButton.module.css\";\nimport './SuperButton.module.css'\n\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n\n    name?:string\n\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        name=\"push\",\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n\n\n    return (\n        <button className={s.button}\n                {...restProps}\n            //  {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        >{name} </button>\n    );\n}\n\nexport default SuperButton;\n","import React, { DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperInput.module.css\";\r\nimport './SuperInput.module.css'\r\n\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\nname?:string\r\n}\r\n\r\nconst SuperInput: React.FC<SuperButtonPropsType> = (\r\n    {\r\n      \r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n\r\n\r\n    return (\r\n        <input {...restProps} className={s.input}\r\n            />\r\n    );\r\n}\r\n\r\nexport default SuperInput;\r\n","import React from 'react'\r\nimport SuperButton from \"../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport SuperInput from \"../../n1-main/m1-ui/common/SuperInput/SuperInput\";\r\nimport {Error404} from \"../f4-404/Error404\";\r\n\r\n\r\nexport const Test = () => {\r\n       return (\r\n        <div className=\"App\">\r\n            <SuperButton/>\r\n            <SuperButton name={\"xxx\"}/>\r\n            <SuperInput type=\"text\"/>\r\n            <Error404/>\r\n        </div>\r\n    )\r\n}","import axios from \"axios\";\r\n\r\nimport {RegisterParamsType} from \"../../n2-features/f1-auth/a2-register/register-reducer\";\r\nimport {registeredEmailType} from \"../../n2-features/f1-auth/a3-recoveryPassword/recoveryPassword-reducer\";\r\nimport {SetPasswordType} from \"../../n2-features/f1-auth/a4-newPassword/newPassword-reducer\";\r\n\r\nimport {DEV_VERSION} from \"../../config\";\r\n\r\n/*const DEVVERSION = store.getState().app.devVersion*/\r\nexport const baseURL = !DEV_VERSION\r\n    ? \"http://localhost:7542/2.0\"\r\n    : \"https://neko-back.herokuapp.com/2.0\"\r\nexport const instance = axios.create({baseURL, withCredentials: true})\r\n\r\n\r\nexport const AuthAPI = {\r\n    getAuthMe() {\r\n        return instance.post(`auth/me`,)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/me`)\r\n    }\r\n}\r\n\r\nexport const RegisterAPI = {\r\n    register(data: RegisterParamsType) {\r\n        return instance.post(\"/auth/register\", data)\r\n    }\r\n}\r\n\r\nexport const recoveryPasswordAPI = {\r\n    registeredEmail(data: registeredEmailType) {\r\n        return instance.post('/auth/forgot', data)\r\n    },\r\n    setPassword(data: SetPasswordType) {\r\n        return instance.post('/auth/set-new-password', data)\r\n    }\r\n}\r\n\r\nexport const CardsAPI = {\r\n    getCardPacks(paginationData: any) {\r\n        return instance.get(`cards/pack`, {params: paginationData})\r\n    },\r\n\r\n    createCardsPack() {\r\n        return instance.post(`cards/pack`, {cardsPack: {name: \"new pack 3.3\"}})\r\n    },\r\n    deleteCardsPack(idCarsPack: string) {\r\n        return instance.delete(`cards/pack/?id=${idCarsPack}`)\r\n    },\r\n    updateCardsPack(id: string) {\r\n        return instance.put(`cards/pack/`, {cardsPack: {_id: id, name: \"new Name 1.1\"}})\r\n    },\r\n    getCards(paginationCardsData: any) {\r\n        return instance.get(`cards/card/`, {params: paginationCardsData})\r\n    },\r\n    createCard(cardsPack_ida: string) {\r\n        return instance.post(`cards/card`, {card: { cardsPack_id: cardsPack_ida}})\r\n    },\r\n    deleteCard(idCarsPack: string) {\r\n        return instance.delete(`cards/card/?id=${idCarsPack}`)\r\n    },\r\n    updateCard(cardId: string) {\r\n        return instance.put(`cards/card`, {\r\n            card: {\r\n                _id: cardId,\r\n                question: \"new question 1.1.1\"\r\n            }\r\n        })\r\n    },\r\n}\r\nexport type cardsPackType = {\r\n    _id: string\r\n    name?: string\r\n}\r\n\r\nexport type getCardPacksDataType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type getCardsDataType = {\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    cardsPack_id: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: string\r\n    page?: number\r\n    pageCount?: number\r\n\r\n}\r\n","import {setIsLoggedIn, setUserData} from \"../../n2-features/f1-auth/a1-login/login-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type UserDataType = {\r\n    _id: string\r\n    email: string | null,\r\n    name: string | null,\r\n    avatar: string | null,\r\n    publicCardPacksCount: number | null,\r\n    created: Date | null,\r\n    updated: Date | null,\r\n    isAdmin: boolean,\r\n    verified: boolean, // подтвердил ли почту\r\n    rememberMe: boolean,\r\n} | null\r\nexport type AppInitialStateType = {\r\n    error: string | null\r\n    status: RequestStatusType\r\n    UserData: UserDataType\r\n    isLoggedIn: boolean\r\n    userId?:string\r\n    devVersion:boolean\r\n\r\n\r\n}\r\nconst initialState: AppInitialStateType = {\r\n    status: 'succeeded',\r\n    error: null,\r\n    UserData: {\r\n        _id:\"\",\r\n        email: null as string | null,\r\n        name: null as string | null,\r\n        avatar: null as string | null,\r\n        publicCardPacksCount: null as number | null,\r\n        created: null as Date | null,\r\n        updated: null as Date | null,\r\n        isAdmin: false,\r\n        verified: false, // подтвердил ли почту\r\n        rememberMe: false,\r\n    },\r\n    isLoggedIn: false,\r\n    devVersion:false // для переключения м-ду локальным бэком и хироку\r\n\r\n}\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: ActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"SET_USER_DATA\":\r\n            return {...state,UserData:action.userData}\r\n        case \"SET_ISLOGGEDIN\":\r\n            return {...state, isLoggedIn: action.value}\r\n        case \"SET-RECEIVED-RESPONSE\":\r\n            return {...state,status: action.status, error: action.error,UserData:action.userData, isLoggedIn: action.isLoggedIn}\r\n        case 'SET-DEV_VERSION':\r\n            return {...state, devVersion: action.devVersion}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setDevVersionAC = (devVersion: boolean) =>\r\n    ({type: 'SET-DEV_VERSION', devVersion} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) =>\r\n    ({type: 'APP/SET-ERROR', error} as const)\r\nexport const receivedResponseAC=(userData:UserDataType,status: RequestStatusType,error: string | null,isLoggedIn: boolean)=>\r\n    ({type: 'SET-RECEIVED-RESPONSE', userData,status,error,isLoggedIn} as const)\r\n\r\n\r\n\r\n\r\nexport type setAppStatusACType = ReturnType<typeof setAppStatusAC>\r\nexport type setAppErrorACType = ReturnType<typeof setAppErrorAC>\r\nexport type receivedResponseACType = ReturnType<typeof receivedResponseAC>\r\nexport type setDevVersionACType = ReturnType<typeof setDevVersionAC>\r\n\r\n\r\ntype ActionsType =\r\n    setAppStatusACType\r\n    | setAppErrorACType\r\n    | ReturnType<typeof setUserData>\r\n    | ReturnType<typeof setIsLoggedIn>\r\n    |receivedResponseACType\r\n    |setDevVersionACType\r\n\r\n\r\n\r\n\r\n","import {CardsAPI, getCardPacksDataType} from '../../../src/n1-main/m3-dal/instance'\r\nimport {Dispatch} from 'redux'\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../n1-main/m2-bll/app-reduser\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {AppRootStateType} from \"../../n1-main/m2-bll/store\";\r\nimport {setIsLoggedIn} from \"../f1-auth/a1-login/login-reducer\";\r\n\r\n\r\nlet initialState = {\r\n    cardPacks: [] as Array<PackType>,\r\n    pagination:\r\n        {\r\n            packName: \"\",//совпадение по имени\r\n            min: 0,\r\n            max: 0,//количество карточек в колоде\r\n            sortPacks: \"0updated\",// сортировка\r\n            page: 1, //номер страницы\r\n            pageCount: 5,//кол-во элем на странице\r\n            user_id: \"\",\r\n\r\n        },\r\n    totalPacksCount: 0  //кол-во колод\r\n}\r\nexport type InitialStateType = typeof initialState\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'CARDS/SET-CARD-PACKS':\r\n            return {...state, cardPacks: action.cardPacks}\r\n\r\n        case 'SET-PAGINATION-PROPERTY':\r\n            return {...state, pagination: {...state.pagination, ...action.property}}\r\n\r\n        case \"SET-TOTAL-PACKS-COUNT\":\r\n            return {...state,  totalPacksCount: action.packsCount}\r\n\r\n        case \"SET-CURRENT-PAGE\":\r\n            return {...state, pagination: {...state.pagination, page: action.currentPage}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC\r\nexport const setCardPacksAC = (cardPacks: Array<PackType>) => ({type: 'CARDS/SET-CARD-PACKS', cardPacks} as const)\r\nexport const removePackAC = (packId: string) => ({type: 'CARDS/REMOVE-PACK', packId} as const)\r\nexport const addPackAC = (pack: PackType) => ({type: 'CARDS/ADD-PACK', pack} as const)\r\nexport const updatePackAC = (packId: string, pack: PackType) => ({type: 'CARDS/UPDATE-PACK', packId, pack} as const)\r\n\r\nexport const setPaginationAC = (property: setPaginationType) => ({type: 'SET-PAGINATION-PROPERTY', property} as const)\r\n\r\nexport const setTotalPacksCountAC = (packsCount: number) => ({type: \"SET-TOTAL-PACKS-COUNT\", packsCount} as const)\r\n\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: 'SET-CURRENT-PAGE', currentPage} as const)\r\n\r\n//TC\r\n\r\n\r\nexport const getCardPacksTC = (getData: getCardPacksDataType = {}) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const paginationData = getState().packs.pagination\r\n            const response = <AxiosResponse<getCardPacksResponseType>>await CardsAPI.getCardPacks(paginationData)\r\n            const packs = response.data.cardPacks\r\n\r\n            const cardPacksTotalCount = response.data.cardPacksTotalCount\r\n\r\n            const currentPage = getData.page\r\n\r\n            currentPage && dispatch(setCurrentPageAC(currentPage))\r\n            dispatch(setTotalPacksCountAC(cardPacksTotalCount))\r\n            dispatch(setCardPacksAC(packs))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n            dispatch(setIsLoggedIn(true))\r\n\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const addCardPacksTC = () =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const createResponse = await CardsAPI.createCardsPack()\r\n            const paginationData = getState().packs.pagination\r\n            const getResponse = <AxiosResponse<getCardPacksResponseType>>await CardsAPI.getCardPacks(paginationData)\r\n            const packs = getResponse.data.cardPacks\r\n            dispatch(setCardPacksAC(packs))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            debugger\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const removePackTC = (idCarsPack: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const deleteResponse = await CardsAPI.deleteCardsPack(idCarsPack)\r\n            const paginationData = getState().packs.pagination\r\n            const getResponse = <AxiosResponse<getCardPacksResponseType>>await CardsAPI.getCardPacks(paginationData)\r\n            const packs = getResponse.data.cardPacks\r\n            dispatch(setCardPacksAC(packs))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const updateTC = (id: string, getData: getCardPacksDataType = {}) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const updateResponse = await CardsAPI.updateCardsPack(id)\r\n            const paginationData = getState().packs.pagination\r\n            const getResponse = <AxiosResponse<getCardPacksResponseType>>await CardsAPI.getCardPacks(paginationData)\r\n            const packs = getResponse.data.cardPacks\r\n            dispatch(setCardPacksAC(packs))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\n\r\n\r\n//types\r\ntype ActionsType =\r\n    | ReturnType<typeof setCardPacksAC>\r\n    | ReturnType<typeof removePackAC>\r\n    | ReturnType<typeof addPackAC>\r\n    | ReturnType<typeof updatePackAC>\r\n    | ReturnType<typeof setPaginationAC>\r\n    | ReturnType<typeof setTotalPacksCountAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n\r\nexport type PackType = {\r\n    _id: string\r\n    user_id: string\r\n    user_name?: string\r\n    private?: boolean\r\n    name: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    cardsCount?: number\r\n    type?: string\r\n    rating?: number\r\n    created?: string\r\n    updated?: string\r\n    more_id?: string\r\n    __v?: number\r\n}\r\nexport type getCardPacksResponseType = {\r\n    cardPacks: Array<PackType>\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number                  // totalItemsCount\r\n    minCardsCount: number\r\n    maxCardsCount: number\r\n    token: string\r\n    tokenDeathTime: Date\r\n}\r\nexport type setPaginationType =\r\n    { packName: string }\r\n    | { min: number }\r\n    | { max: number }\r\n    | { sortPacks: string }\r\n    | { page: number }\r\n    | { pageCount: number }\r\n    | { user_id: string }\r\n\r\n","import {CardsAPI, getCardPacksDataType, getCardsDataType} from \"../../n1-main/m3-dal/instance\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../n1-main/m2-bll/app-reduser\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {AppRootStateType} from \"../../n1-main/m2-bll/store\";\r\n\r\n\r\nconst initialState = {\r\n    cards: [] as Array<CardType>,\r\n    paginationCards: {\r\n        page: 1,\r\n        pageCount: 2,\r\n        cardAnswer: '',\r\n        cardQuestion: '',\r\n        cardsPack_id: '',\r\n        min: 0,\r\n        max: 0,\r\n        sortCards: ''\r\n    },\r\n    totalCardsCount: 0\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-CARDS':\r\n            return {...state, cards: action.cards}\r\n        case \"SET-TOTAL-CADRS-COUNT\":\r\n            return {...state, totalCardsCount: action.packsCount}\r\n        case \"SET-CURRENT-PAGE\":\r\n            return {...state, paginationCards: {...state.paginationCards, page: action.currentPage}}\r\n        case \"SET-ID\":\r\n            return {...state, paginationCards: {...state.paginationCards, cardsPack_id: action.id}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC\r\n\r\nexport const setCardAC = (cards: Array<CardType>) => ({type: 'SET-CARDS', cards} as const)\r\nexport const setTotalCardsCountAC = (packsCount: number) => ({type: \"SET-TOTAL-CADRS-COUNT\", packsCount} as const)\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: 'SET-CURRENT-PAGE', currentPage} as const)\r\nexport const setCurrentIdAC = (id: string) => ({type: 'SET-ID', id} as const)\r\n\r\n//TC\r\n\r\n\r\nexport const getCardTC = () =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n\r\n            const paginationData = getState().cards.paginationCards\r\n            const response = <AxiosResponse<GetCardsResponseType>>await CardsAPI.getCards(paginationData)\r\n            const cards = response.data.cards\r\n\r\n            dispatch(setTotalCardsCountAC(response.data.cardsTotalCount))\r\n            dispatch(setCardAC(cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const addCardTC = (cardsPack_id: string) =>\r\n    async (dispatch: Dispatch , getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n\r\n            const addResponse = <AxiosResponse<any>>await CardsAPI.createCard(cardsPack_id)\r\n            const paginationData = getState().cards.paginationCards\r\n            const response = <AxiosResponse<GetCardsResponseType>>await CardsAPI.getCards(paginationData)\r\n            const cards = response.data.cards\r\n            dispatch(setCardAC(cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const removeCardTC = (cardsPack_id: string, cardId: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const removeResponse = <AxiosResponse<any>>await CardsAPI.deleteCard(cardId)\r\n            const paginationData = getState().cards.paginationCards\r\n            const response = <AxiosResponse<GetCardsResponseType>>await CardsAPI.getCards(paginationData)\r\n            const cards = response.data.cards\r\n            dispatch(setCardAC(cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\nexport const updateCardTC = (cardsPack_id: string, cardId: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            const removeResponse = <AxiosResponse<any>>await CardsAPI.updateCard(cardId)\r\n\r\n            const paginationData = getState().cards.paginationCards\r\n            const response = <AxiosResponse<GetCardsResponseType>>await CardsAPI.getCards(paginationData)\r\n            const cards = response.data.cards\r\n            dispatch(setCardAC(cards))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setAppErrorAC(null))\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\ntype ActionsType = ReturnType<typeof setCardAC>\r\n    | ReturnType<typeof setTotalCardsCountAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setCurrentIdAC>\r\n\r\nexport type GetCardsResponseType = {\r\n    cards: Array<CardType>\r\n    packUserId: string\r\n    page: number\r\n    pageCount: number\r\n    cardsTotalCount: number\r\n    minGrade: number\r\n    token: string\r\n    tokenDeathTime: Date\r\n}\r\nexport type CardType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    user_id: string\r\n    answer: string\r\n    question: string\r\n    grade: number\r\n    shots: number\r\n    comments: string\r\n    type: string\r\n    rating: number\r\n    more_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    answerImg: string\r\n    questionImg: string\r\n    questionVideo: string\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {AuthAPI} from '../../../n1-main/m3-dal/instance'\r\nimport {receivedResponseAC, setAppErrorAC, setAppStatusAC, UserDataType} from \"../../../n1-main/m2-bll/app-reduser\";\r\nimport {setCardPacksAC} from \"../../f5-packs/Packs-reduser\";\r\nimport {setCardAC} from \"../../f6-cards/Cards-reducer\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\nconst SET_ISLOGGEDIN = 'SET_ISLOGGEDIN'\r\n\r\nconst initialState = {}\r\n\r\nexport const loginReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC\r\nexport const setUserData = (userData: UserDataType) =>\r\n    ({\r\n        type: SET_USER_DATA, userData\r\n    } as const)\r\n\r\nexport const setIsLoggedIn = (value: boolean) => ({type: SET_ISLOGGEDIN, value} as const)\r\n\r\n//TC\r\n\r\nexport const getMe = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        let response = await AuthAPI.getAuthMe()\r\n        let userData = response.data\r\n        dispatch(receivedResponseAC(userData, 'succeeded', null, true))\r\n\r\n    } catch (e) {\r\n        dispatch(setAppStatusAC('failed'))\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console')\r\n        dispatch(setAppErrorAC(error))\r\n    }\r\n}\r\n\r\nexport const login = (mail: string, password: string, remember_Me: boolean) =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            let response = await AuthAPI.login(mail, password, remember_Me)\r\n            let userData = response.data\r\n            dispatch(receivedResponseAC(userData, 'succeeded', null, true))\r\n\r\n        } catch (e) {\r\n            dispatch(setAppStatusAC('failed'))\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n    }\r\n\r\nexport const logout = () =>\r\n    async (dispatch: any) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            await AuthAPI.logout()\r\n            dispatch(receivedResponseAC(null, 'succeeded', null, false))\r\n            dispatch(setCardPacksAC([]))\r\n            dispatch(setCardAC([]))\r\n        } catch (e) {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            dispatch(setAppErrorAC(error))\r\n        }\r\n\r\n    }\r\n\r\n//types\r\ntype ActionsType = | ReturnType<typeof setUserData> | ReturnType<typeof setIsLoggedIn>\r\ntype InitialStateType = typeof initialState\r\n","import React from 'react'\r\nimport SuperInput from '../../../n1-main/m1-ui/common/SuperInput/SuperInput';\r\nimport SuperButton from '../../../n1-main/m1-ui/common/SuperButton/SuperButton';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {login} from './login-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useFormik} from 'formik';\r\nimport {AppRootStateType} from '../../../../src/n1-main/m2-bll/store'\r\nimport {PATH} from \"../../../n1-main/m1-ui/routes/Routes\";\r\nimport {RequestStatusType, setAppErrorAC} from \"../../../n1-main/m2-bll/app-reduser\";\r\n\r\n\r\nexport const Login = () => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const disable = status === 'loading'\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"Potapov.eo@mail.ru\",\r\n            password: \"jekajeka\",\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            const thunk = login(values.email, values.password, values.rememberMe)\r\n            dispatch(thunk)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        /* dispatch(setAppErrorAC(\"you are already logged in\"))*/\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>LOG IN</h1>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div><SuperInput name=\"email\" onChange={formik.handleChange} onBlur={formik.handleBlur} type=\"text\"\r\n                                 value={formik.values.email} placeholder={\"Email\"}/></div>\r\n                {formik.touched.email && formik.errors.email ?\r\n                    <div style={{color: \"red\"}}> {formik.errors.email} </div> : null}\r\n                <div><SuperInput name=\"password\" onChange={formik.handleChange} onBlur={formik.handleBlur}\r\n                                 type=\"password\" value={formik.values.password} placeholder={\"Password\"}/></div>\r\n                {formik.touched.password && formik.errors.password ?\r\n                    <div style={{color: \"red\"}}> {formik.errors.password} </div> : null}\r\n                <div><span>Remember me </span><SuperInput name=\"rememberMe\" onChange={formik.handleChange}\r\n                                                          checked={formik.values.rememberMe} type=\"checkbox\"/></div>\r\n                <div><SuperButton disabled={disable} name=\"log in\"/></div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n//types\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n","import {RegisterAPI} from \"../../../n1-main/m3-dal/instance\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    setAppErrorAC,\r\n    setAppErrorACType,\r\n    setAppStatusAC,\r\n    setAppStatusACType\r\n} from \"../../../n1-main/m2-bll/app-reduser\";\r\n\r\n\r\nconst initialState = {\r\n    isRegister: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-IS-REGISTER':\r\n            return {...state, isRegister: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setIsRegister = (value: boolean) => ({type: 'SET-IS-REGISTER', value} as const)\r\n\r\nexport const RegisterTC = (data: RegisterParamsType) => async (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        await RegisterAPI.register(data)\r\n        dispatch(setIsRegister(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        dispatch(setAppErrorAC(null))\r\n    } catch (e) {\r\n        dispatch(setAppStatusAC('failed'))\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console')\r\n\r\n        dispatch(setAppErrorAC(error))\r\n    }\r\n\r\n}\r\n\r\nexport type RegisterParamsType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setIsRegister> | setAppStatusACType | setAppErrorACType\r\n\r\n","import React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RegisterTC} from \"./register-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {PATH} from \"../../../n1-main/m1-ui/routes/Routes\";\r\nimport {RequestStatusType, setAppErrorAC} from \"../../../n1-main/m2-bll/app-reduser\";\r\nimport SuperButton from \"../../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport SuperInput from \"../../../n1-main/m1-ui/common/SuperInput/SuperInput\";\r\n\r\nexport const Register = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n    const isRegister = useSelector<AppRootStateType, boolean>(state => state.register.isRegister)\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n    }\r\n    const disable = status === 'loading'\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'potapov.eo@yandex.ru',\r\n            password: 'jekajeka',\r\n            password2: 'jekajeka',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'email Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'password Required';\r\n            } else if (values.password.length < 7) {\r\n                errors.password = 'Invalid email address';\r\n            } else if (values.password2 !== values.password) {\r\n                errors.password = 'Passwords do not match';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n\r\n        onSubmit: values => {\r\n\r\n            /*dispatch(RegisterTC(values))*/\r\n            dispatch(RegisterTC({email: values.email, password: values.password}))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n     /*   dispatch(setAppErrorAC(\"you are already logged in\"))*/\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n    if (isRegister) {\r\n\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return <div className=\"App\">\r\n\r\n        <form onSubmit={formik.handleSubmit}>\r\n           <h1>REGISTRATION</h1> \r\n            <div>\r\n                <SuperInput\r\n                    placeholder={\"email\"}\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.email}\r\n                />\r\n                {formik.touched.email && formik.errors.email ?\r\n                    <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n            </div>\r\n            <div>\r\n                <SuperInput\r\n                    placeholder={\"password\"}\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password}\r\n                />\r\n            </div>\r\n            <div>\r\n                <SuperInput\r\n                    placeholder={\"password2\"}\r\n                    type=\"password\"\r\n                    name=\"password2\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password2}\r\n                />\r\n                {formik.touched.password && formik.errors.password ?\r\n                    <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n            </div>\r\n            <SuperButton disabled={disable} type=\"submit\"/>\r\n\r\n        </form>\r\n\r\n\r\n    </div>\r\n}","import {Dispatch} from 'redux'\r\nimport {recoveryPasswordAPI} from \"../../../n1-main/m3-dal/instance\";\r\nimport {\r\n    setAppErrorAC,\r\n    setAppErrorACType,\r\n    setAppStatusAC,\r\n    setAppStatusACType\r\n} from \"../../../n1-main/m2-bll/app-reduser\";\r\n\r\n\r\nconst initialState = {\r\n    registeredEmail: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoveryPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"VERIFICATION-EMAIL\":\r\n            return {...state, registeredEmail: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst verificationEmailAC = (value: boolean) => {\r\n    return {type: 'VERIFICATION-EMAIL', value} as const\r\n}\r\n\r\nexport const verificationEmailTC = (data: registeredEmailType) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        return recoveryPasswordAPI.registeredEmail(data).then(res => {\r\n            if (res.data.success) {\r\n                dispatch(verificationEmailAC(true))\r\n            }\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n\r\n            .catch((e) => {\r\n                dispatch(setAppStatusAC('failed'))\r\n                const error = e.response\r\n                    ? e.response.data.error\r\n                    : (e.message + ', more details in the console')\r\n                dispatch(setAppErrorAC(error))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport type registeredEmailType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\n\r\ntype ActionsType = ReturnType<typeof verificationEmailAC> | setAppStatusACType | setAppErrorACType","import React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport SuperButton from \"../../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport SuperInput from \"../../../n1-main/m1-ui/common/SuperInput/SuperInput\";\r\nimport {verificationEmailTC} from \"./recoveryPassword-reducer\";\r\nimport {RequestStatusType} from \"../../../n1-main/m2-bll/app-reduser\";\r\nimport {DEV_VERSION} from \"../../../config\";\r\n\r\n\r\nexport const RecoveryPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const registeredEmail = useSelector<AppRootStateType, boolean>(state => state.recoveryPassword.registeredEmail)\r\n\r\n    const from = \"test-front-admin <ai73a@yandex.by>\"\r\n    const message = !DEV_VERSION\r\n        ? \"<div>password recovery link:<a\" +\r\n        \" href='http://localhost:3000/#/new-password/$token$'>link</a></div>\"\r\n        : \"<div>password recovery link:<a\" +\r\n        \" href='https://potapov-eo.github.io/friday-day/#/new-password/$token$'>link</a></div>\"\r\n\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        from?: string\r\n        message?: string\r\n    }\r\n    const disable = status === 'loading'\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n\r\n            dispatch(verificationEmailTC({email: values.email, from, message}))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    const {token} = useParams<{ token: string }>()\r\n\r\n    if (registeredEmail) {\r\n        return (\r\n            <div>\r\n                <div>Success!</div>\r\n                <div>Click the link in the message in your email</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return <div className=\"App\">\r\n\r\n        <form onSubmit={formik.handleSubmit}>\r\n            RecoveryPassword\r\n            <div>\r\n                <SuperInput\r\n                    placeholder={\"email\"}\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.email}\r\n                />\r\n                {formik.touched.email && formik.errors.email ?\r\n                    <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n            </div>\r\n\r\n            <SuperButton disabled={disable} type=\"submit\" name='Send'/>\r\n\r\n        </form>\r\n\r\n    </div>\r\n}","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getMe} from \"../f1-auth/a1-login/login-reducer\";\r\nimport {AppRootStateType} from \"../../n1-main/m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../n1-main/m1-ui/routes/Routes\";\r\nimport {setAppErrorAC, UserDataType} from \"../../n1-main/m2-bll/app-reduser\";\r\nimport s from \"./Profile.module.css\";\r\n\r\n\r\nexport const Profile = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n    const userData = useSelector<AppRootStateType, UserDataType>(state => state.app.UserData)\r\n   /* useEffect(() => {\r\n        if (isLoggedIn) {\r\n            dispatch(getMe())\r\n\r\n        }\r\n    }, [isLoggedIn])*/\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n\r\n    }\r\n     const avatar = \"https://www.gravatar.com/avatar/c37e0453882ec1e1d40bb4387e27b1dc?s=200&r=g&d=mm\"\r\n    return (\r\n\r\n        <div className={s.profile}>\r\n            <h1>PROFILE</h1>\r\n            <div className={s.profileContainer}>\r\n                <img className={s.avatar} src = {avatar}/>\r\n                {/* {userData.avatar} */}\r\n                <div className={s.info}>\r\n                    <div> Name: <span>{userData?userData.name:null}</span></div>\r\n                    <div> Email: <span>{userData?userData.email:null}</span></div>\r\n                    <div>Public Card Packs Count: <span>{userData?userData.publicCardPacksCount:null}</span></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {setAppErrorACType, setAppStatusAC, setAppStatusACType} from \"../../../n1-main/m2-bll/app-reduser\";\r\nimport {Dispatch} from \"redux\";\r\nimport {recoveryPasswordAPI} from \"../../../n1-main/m3-dal/instance\";\r\n\r\nconst initialState = {\r\n    newPassword: ''\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const newPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-PASSWORD\": {\r\n            return {...state, newPassword: action.newPassword}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setPasswordAC = (newPassword: string) => ({type: \"APP/SET-PASSWORD\", newPassword} as const)\r\n\r\nexport const setPasswordTC1 = (data: SetPasswordType) => {\r\n    return (dispatch: Dispatch) => {\r\n        recoveryPasswordAPI.setPassword(data).then(res => dispatch(setPasswordAC(data.password)))\r\n    }\r\n}\r\nexport const setPasswordTC = (data: SetPasswordType) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        return recoveryPasswordAPI.setPassword(data)\r\n            .then(res => {\r\n                dispatch(setPasswordAC(data.password))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport type SetPasswordType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setPasswordAC> | setAppStatusACType | setAppErrorACType","import React from 'react'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"../../../n1-main/m2-bll/app-reduser\";\r\nimport SuperButton from \"../../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport SuperInput from \"../../../n1-main/m1-ui/common/SuperInput/SuperInput\";\r\nimport {setPasswordTC} from \"./newPassword-reducer\";\r\nimport {PATH} from \"../../../n1-main/m1-ui/routes/Routes\";\r\n\r\nexport const NewPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const newPassword = useSelector<AppRootStateType, string>(state => state.newPassword.newPassword)\r\n    type FormikErrorType = {\r\n        password?: string\r\n        resetPasswordToken?: string\r\n    }\r\n\r\n\r\n\r\n    let {token} = useParams<{token:string}>()\r\n    console.log(token)\r\n\r\n    const disable = status === 'loading'\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            password2: '',\r\n            resetPasswordToken: (token)\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'password Required';\r\n            } else if (values.password.length < 7) {\r\n                errors.password = 'length of passwords should be 7 and more simbols';\r\n            } else if (values.password2 !== values.password) {\r\n                errors.password = 'Passwords do not match';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(setPasswordTC({password: values.password, resetPasswordToken: values.resetPasswordToken}))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (newPassword) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return <div className=\"App\">\r\n        <form onSubmit={formik.handleSubmit}>\r\n            NewPassword\r\n            <div>\r\n                <SuperInput\r\n                    placeholder={\"password\"}\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password}\r\n                />\r\n                {formik.touched.password && formik.errors.password ?\r\n                    <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n            </div>\r\n            <div>\r\n                <SuperInput\r\n                    placeholder={\"confirm password\"}\r\n                    type=\"password\"\r\n                    name=\"password2\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password2}\r\n                />\r\n                {formik.touched.password2 && formik.errors.password2 ?\r\n                    <div style={{color: \"red\"}}>{formik.errors.password2}</div> : null}\r\n            </div>\r\n\r\n            <SuperButton disabled={disable} type=\"submit\" name='Send'/>\r\n\r\n        </form>\r\n    </div>\r\n}\r\n","import React from 'react'\r\nimport s from '../Packs.module.css'\r\nimport SuperButton from \"../../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../n1-main/m1-ui/routes/Routes\";\r\nimport { removePackTC, updateTC} from \"../Packs-reduser\";\r\nimport {RequestStatusType} from \"../../../n1-main/m2-bll/app-reduser\";\r\n\r\ntype packPropsType = {\r\n    name: string\r\n    cardsCount?: number\r\n    updated?: string\r\n    pack_id: string\r\n    userId: string\r\n}\r\nexport const Pack = (props: packPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const registerUserId = useSelector<AppRootStateType, string>(state => state.app.UserData ? state.app.UserData._id : \"\")\r\n    const isMyPack = (props.userId === registerUserId) && !(status === 'loading')\r\n    const del = () => {\r\n        dispatch(removePackTC(props.pack_id))\r\n    }\r\n    const update = () => {\r\n        dispatch(updateTC(props.pack_id))\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className={s.tableString} key={props.pack_id}>\r\n            <div>{props.name}</div>\r\n            <div>{props.cardsCount}</div>\r\n            <div>{props.updated}</div>\r\n            <div><SuperButton disabled={!isMyPack} name={\"del\"} onClick={del}/></div>\r\n            <div><SuperButton disabled={!isMyPack} name={\"update\"} onClick={update}/></div>\r\n            <NavLink to={`${PATH.CARDS}/${props.pack_id}`} activeClassName={s.activeLink}>CARDS</NavLink>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport s from './SortButtons.module.css'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faSortDown, faSortUp } from '@fortawesome/free-solid-svg-icons'\r\nimport {getCardPacksTC, setPaginationAC} from '../../../../n2-features/f5-packs/Packs-reduser'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nexport const SortButtons = (props:{param:string}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const sortUp = (param: string) => {\r\n        dispatch(setPaginationAC({ sortPacks: `1` + param }))\r\n        dispatch(getCardPacksTC())\r\n    }\r\n    const sortDown = (param: string) => {\r\n        dispatch(setPaginationAC({ sortPacks: `0` + param }))\r\n        dispatch(getCardPacksTC())\r\n    }\r\n    return <div className={s.tableSortIcons}>\r\n        <a type=\"submit\" onClick={() => sortUp(props.param)}><FontAwesomeIcon icon={faSortUp} size=\"1x\" /></a>\r\n        <a type=\"submit\" onClick={() => sortDown(props.param)}><FontAwesomeIcon icon={faSortDown} size=\"1x\" /></a>\r\n    </div>\r\n}\r\n","import React, {useState} from \"react\";\r\nimport styles from './Paginator.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize: number\r\n}\r\n\r\nexport const Paginator = (props: PropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize)\r\n\r\n    let pages = []\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / props.portionSize)\r\n    let [portionNumber, setPortionNumber] = useState<number>(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * props.portionSize\r\n\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n            {\r\n                portionNumber > 1 &&\r\n                <button onClick={() => setPortionNumber(portionNumber - 1)}>LEFT</button>\r\n            }\r\n            {\r\n                pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map(p => {\r\n                        return <span\r\n                            className={props.currentPage === p ? `${styles.coursor && styles.selectedPage}` : `'' ${styles.coursor} `}\r\n                            onClick={() => {\r\n                                props.onPageChanged(p)\r\n                            }}\r\n                        > {p} </span>\r\n                    })\r\n            }\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)}>Right</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useCallback, useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../../src/n1-main/m2-bll/store'\r\nimport {addCardPacksTC, getCardPacksTC, PackType, setPaginationAC} from './/Packs-reduser'\r\nimport s from './Packs.module.css'\r\nimport SuperButton from \"../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\nimport {Pack} from \"./pack/Pack\";\r\nimport {RequestStatusType} from \"../../n1-main/m2-bll/app-reduser\";\r\nimport {SortButtons} from '../../n1-main/m1-ui/common/SortButtons/SortButtons'\r\nimport {Paginator} from \"../../n1-main/m1-ui/common/Paginator/Paginator\";\r\nimport {getCardPacksDataType} from \"../../n1-main/m3-dal/instance\";\r\n\r\n\r\nexport const Packs = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n    const userId = useSelector<AppRootStateType, string>(state => state.app.UserData ? state.app.UserData._id : \"\")\r\n    const cardPacks = useSelector<AppRootStateType, Array<PackType>>(state => state.packs.cardPacks)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const page = useSelector<AppRootStateType, number>(state => state.packs.pagination.page)\r\n\r\n    const dispatch = useDispatch()\r\n    const [isChange, setIsChange] = useState<boolean>(false)\r\n    const [idTimeout, setIdTimeout] = useState<number>(0)\r\n    const [searchName, setSearchName] = useState<string>(\"\")\r\n    const isLoading = status === 'loading'\r\n\r\n    const setChange = useCallback(() => {\r\n        clearTimeout(idTimeout)\r\n        const id = window.setTimeout(() => {\r\n            setIsChange(true)\r\n            setIdTimeout(0)\r\n        }, 1500)\r\n        setIdTimeout(id)\r\n    }, [idTimeout])\r\n\r\n    useEffect(() => {\r\n        if (isChange && !isLoading) {\r\n            dispatch(setPaginationAC({packName: searchName}))\r\n            dispatch(getCardPacksTC())\r\n            setIsChange(false)\r\n        }\r\n    }, [setChange, isChange, setIsChange, setPaginationAC, isLoading])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (isLoggedIn) {\r\n            dispatch(getCardPacksTC())\r\n        }\r\n    }, [isLoggedIn])\r\n\r\n    const change = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.checked) {\r\n            dispatch(setPaginationAC({user_id: userId}))\r\n            dispatch(getCardPacksTC())\r\n\r\n        } else {\r\n            dispatch(setPaginationAC({user_id: \"\"}))\r\n            dispatch(getCardPacksTC())\r\n        }\r\n    }\r\n\r\n    const addPack = () => dispatch(addCardPacksTC())\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchName(e.currentTarget.value)\r\n        setChange()\r\n    }\r\n\r\n    const pageSize = useSelector<AppRootStateType, number>(state => state.packs.pagination.pageCount)\r\n    const totalItemsCount = useSelector<AppRootStateType, number>(state => state.packs.totalPacksCount)\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(setPaginationAC({page: pageNumber}))\r\n        dispatch(getCardPacksTC())\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={s.table}>\r\n            <h1>Packs</h1>\r\n            <div> my Pack <input type={\"checkbox\"} onChange={change}/></div>\r\n            <div>\r\n                <Paginator currentPage={page} pageSize={pageSize} totalItemsCount={totalItemsCount} portionSize={10}\r\n                           onPageChanged={onPageChanged}/>\r\n            </div>\r\n\r\n            <div> Pack name search: <input value={searchName} onChange={onChangeCallback}/></div>\r\n            {isLoggedIn ? <div className={s.tableString}>\r\n\r\n\r\n                <div className={s.tableColumnTitle}>\r\n                    <SortButtons param=\"name\"/>\r\n                    <h2> Name</h2>\r\n                </div>\r\n                <div className={s.tableColumnTitle}>\r\n                    <SortButtons param=\"cardsCount\"/>\r\n                    <h2> CardsCount</h2>\r\n                </div>\r\n                <div className={s.tableColumnTitle}>\r\n                    <SortButtons param=\"updated\"/>\r\n                    <h2> Updated</h2>\r\n                </div>\r\n                <div><SuperButton onClick={addPack} name={\"add\"}/></div>\r\n                <h2>Cards</h2>\r\n\r\n            </div> : <div>\"you are not authorized\"</div>}\r\n\r\n            {cardPacks.map(packs =>\r\n                <Pack name={packs.name} cardsCount={packs.cardsCount} updated={packs.updated} pack_id={packs._id}\r\n                      userId={packs.user_id}/>\r\n            )}\r\n\r\n            <Paginator currentPage={page} pageSize={pageSize} totalItemsCount={totalItemsCount} portionSize={10}\r\n                       onPageChanged={onPageChanged}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport s from '../../f5-packs/Packs.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {CardType, removeCardTC, updateCardTC} from \"../Cards-reducer\";\r\nimport {RequestStatusType} from \"../../../n1-main/m2-bll/app-reduser\";\r\nimport SuperButton from \"../../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\n\r\ntype cardPropsType = {\r\n    card: CardType\r\n}\r\nexport const Card = (props: cardPropsType) => {\r\n    const card = props.card\r\n    const dispatch = useDispatch()\r\n    const registerUserId = useSelector<AppRootStateType, string>(state => state.app.UserData ? state.app.UserData._id : \"\")\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isMyPack = (card.user_id === registerUserId) && !(status === 'loading')\r\n    const removeCard = () => dispatch(removeCardTC(card.cardsPack_id, card._id))\r\n    const updatedCard = () => dispatch(updateCardTC(card.cardsPack_id, card._id))\r\n    return (\r\n\r\n        <div className={s.tableString} key={card._id}>\r\n            <div>{card.question}</div>\r\n            <div>{card.answer}</div>\r\n            <div>{card.grade}</div>\r\n            <div>{card.updated}</div>\r\n            <div>\r\n                <SuperButton disabled={!isMyPack} onClick={removeCard} name={\"del\"}/>\r\n            </div>\r\n            <div>\r\n                <SuperButton disabled={!isMyPack} onClick={updatedCard} name={\"update\"}/>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../n1-main/m2-bll/store\";\r\nimport {RequestStatusType} from \"../../n1-main/m2-bll/app-reduser\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport s from \"../f5-packs/Packs.module.css\";\r\nimport {addCardTC, CardType, getCardTC, setCurrentIdAC, setCurrentPageAC} from \"./Cards-reducer\";\r\nimport {Card} from \"./card/Card\";\r\nimport {PackType} from \"../f5-packs/Packs-reduser\";\r\nimport {Paginator} from \"../../n1-main/m1-ui/common/Paginator/Paginator\";\r\nimport {getCardsDataType} from \"../../n1-main/m3-dal/instance\";\r\nimport SuperButton from \"../../n1-main/m1-ui/common/SuperButton/SuperButton\";\r\n\r\nexport const Cards = () => {\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token: string }>()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const registerUserId = useSelector<AppRootStateType, string>(state => state.app.UserData ? state.app.UserData._id : \"\")\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n    const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards.cards)\r\n    const packs = useSelector<AppRootStateType, Array<PackType>>(state => state.packs.cardPacks)\r\n    const page = useSelector<AppRootStateType, number>(state => state.cards.paginationCards.page)\r\n    const pageSize = useSelector<AppRootStateType, number>(state => state.cards.paginationCards.pageCount)\r\n    const totalItemsCount = useSelector<AppRootStateType, number>(state => state.cards.totalCardsCount)\r\n\r\n    const getCardsData = useSelector<AppRootStateType, getCardsDataType>(state => state.cards.paginationCards)\r\n\r\n\r\n    const pack = packs.find(p => p._id === token)\r\n    const createdUserId = pack ? pack.user_id : registerUserId\r\n    const isMyPack = (createdUserId === registerUserId) && !(status === 'loading')\r\n\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            dispatch(setCurrentIdAC(token))\r\n            dispatch(getCardTC())\r\n        }\r\n    }, [token])\r\n\r\n    const addCard = () => dispatch(addCardTC(token))\r\n\r\n    const onPageChanged = (newNumber: number) => {\r\n        dispatch(setCurrentPageAC(newNumber))\r\n        dispatch(getCardTC())\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className={s.table}>\r\n            <h1>Cards</h1>\r\n            <div>\r\n                <Paginator currentPage={8} pageSize={pageSize} totalItemsCount={totalItemsCount} portionSize={3}\r\n                           onPageChanged={onPageChanged}/>\r\n            </div>\r\n            {isLoggedIn ? <div className={s.tableString}>\r\n\r\n                <div>question</div>\r\n                <div>answer</div>\r\n                <div>grade</div>\r\n                <div>updated</div>\r\n                <div>\r\n                    <SuperButton onClick={addCard} disabled={!isMyPack} name={\"add\"}/>\r\n                </div>\r\n\r\n            </div> : <div>\"you are not authorized\"</div>}\r\n\r\n            {cards.map(card =>\r\n                <Card card={card}/>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Error404} from \"../../../n2-features/f4-404/Error404\";\r\nimport {Test} from \"../../../n2-features/f0-test/test\";\r\nimport {Login} from \"../../../n2-features/f1-auth/a1-login/LoginFormik\";\r\nimport {Register} from \"../../../n2-features/f1-auth/a2-register/Register\";\r\nimport {RecoveryPassword} from \"../../../n2-features/f1-auth/a3-recoveryPassword/RecoveryPassword\";\r\nimport {Profile} from \"../../../n2-features/f2-profile/Profile\";\r\nimport {NewPassword} from \"../../../n2-features/f1-auth/a4-newPassword/NewPassword\";\r\nimport { Packs } from '../../../n2-features/f5-packs/Packs';\r\nimport {Cards} from \"../../../n2-features/f6-cards/Cards\";\r\n\r\n\r\nexport const PATH = {\r\n    HOME: \"/home\",\r\n    TEST: \"/test\",\r\n    LOGIN: \"/login\",\r\n    REGISTER: \"/register\",\r\n    RECOVERY_PASSWORD: \"/recovery-password\",\r\n    NEW_PASSWORD: \"/new-password\",\r\n    PROFILE: \"/profile\",\r\n    PACK: \"/packs\",\r\n    CARDS: \"/cards\"\r\n}\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n\r\n            <Switch>\r\n\r\n                <Route path={\"/\"} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n                <Route path={PATH.TEST} render={() => <Test/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n                <Route path={PATH.RECOVERY_PASSWORD} render={() => <RecoveryPassword/>}/>\r\n                <Route path={`${PATH.NEW_PASSWORD}/:token`} render={() => <NewPassword/> }/>\r\n                <Route path={PATH.NEW_PASSWORD} exact render={ () => <RecoveryPassword/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.PACK} render={() => <Packs />}/>\r\n                <Route path={`${PATH.CARDS}/:token`} render={() => <Cards/>}/>\r\n                <Route path={PATH.CARDS} render={() => <Cards/>}/>\r\n                <Route render={() => <Error404/>}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import style from './ErrorSnackBar.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppErrorAC} from \"../../../m2-bll/app-reduser\";\r\n\r\ntype ErrorSnackBarPropsType = {\r\n    errorMessage: string\r\n}\r\n\r\nexport const ErrorSnackBar = (props: ErrorSnackBarPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = () => dispatch(setAppErrorAC(null))\r\n\r\n    return (\r\n        <div className={style.notification}>\r\n        <div className={style.text}> {props.errorMessage} </div>\r\n        <div className={`${style.close}`}>\r\n            <div className={style.text} onClick={onClickHandler}>X</div>\r\n        </div>\r\n    </div>)\r\n};\r\n\r\n","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./nav.module.css\"\r\nimport {PATH} from \"../../routes/Routes\";\r\n\r\nexport const Nav = () => {\r\n    return (\r\n\r\n        <div className={s.nav}>\r\n\r\n\r\n            <span>\r\n                <NavLink to={PATH.TEST} activeClassName={s.activeLink}>TEST</NavLink>\r\n            </span>\r\n            <span>\r\n                <NavLink to={PATH.LOGIN} activeClassName={s.activeLink}>LOGIN</NavLink>\r\n            </span>\r\n            <span>\r\n                <NavLink to={PATH.REGISTER} activeClassName={s.activeLink}>REGISTER</NavLink>\r\n            </span>\r\n            <span>\r\n                <NavLink to={PATH.RECOVERY_PASSWORD} activeClassName={s.activeLink}>RECOVERY_PASSWORD</NavLink>\r\n            </span>\r\n            <span>\r\n                <NavLink to={PATH.NEW_PASSWORD} activeClassName={s.activeLink}>NEW_PASSWORD</NavLink>\r\n            </span>\r\n            <span>\r\n                <NavLink to={PATH.PROFILE} activeClassName={s.activeLink}>PROFILE</NavLink>\r\n            </span>\r\n            <span>\r\n                <NavLink to={PATH.PACK} activeClassName={s.activeLink}>PACKS</NavLink>\r\n            </span>\r\n            <span>\r\n                <NavLink to={PATH.CARDS} activeClassName={s.activeLink}>CARDS</NavLink>\r\n            </span>\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react'\r\nimport s from \"./Header.module.css\"\r\nimport {Nav} from \"./nav/nav\";\r\nimport SuperButton from '../../../n1-main/m1-ui/common/SuperButton/SuperButton';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {logout} from '../../../n2-features/f1-auth/a1-login/login-reducer'\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faDAndD} from \"@fortawesome/free-brands-svg-icons\"\r\nimport {setDevVersionAC} from \"../../m2-bll/app-reduser\";\r\n\r\n\r\nexport const Header = () => {\r\n    const dispatch = useDispatch()\r\n    const UserName = useSelector<AppRootStateType, string | null>(state => state.app.UserData ? state.app.UserData.name : null)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.app.isLoggedIn)\r\n    const dev = useSelector<AppRootStateType, boolean>(state => state.app.devVersion)// для переключения м-ду локальным бэком и хироку\r\n    const changeDev = (e: ChangeEvent<HTMLInputElement>) => {dispatch(setDevVersionAC(e.currentTarget.checked))\r\n    }\r\n    const logoutOnClick = () => {\r\n        const thunk = logout()\r\n        dispatch(thunk)\r\n    }\r\n\r\n    return (\r\n        <div className={s.header}>\r\n           {/* <div className={s.devInput}><input type={\"checkbox\"}\r\n                                               onChange={changeDev}/> {dev ? \"https://neko-back.herokuapp.com/2.0\" : \"http://localhost:7542/2.0/\"}\r\n            </div>*/}\r\n            <FontAwesomeIcon icon={faDAndD} size=\"4x\"/>\r\n            <Nav/>\r\n\r\n\r\n            <div className={s.burger}>\r\n                <a href=\"\" className={s.a}>\r\n                    <span className={s.burgerToggle}>\r\n                        <span className={s.nk1}></span>\r\n                        <span className={s.nk2}></span>\r\n                        <span className={s.nk3}></span>\r\n                    </span>\r\n                </a>\r\n            </div>\r\n            {isLoggedIn && < SuperButton onClick={logoutOnClick} name=\"logout\"/>}\r\n            {isLoggedIn &&\r\n            <div style={{margin: \"10px\", color: \"#e08821\", fontWeight: \"bold\", fontSize: \"20px\"}}> {UserName} </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from \"../m2-bll/store\";\r\nimport {RequestStatusType} from \"../m2-bll/app-reduser\";\r\nimport Preloader from \"./common/Preloder/Preloader\";\r\nimport {Routes} from \"./routes/Routes\";\r\nimport {ErrorSnackBar} from \"./common/ErrorSnackBar/ErrorSnackBar\";\r\nimport {Header} from \"./header/Header\";\r\nimport {getMe} from \"../../n2-features/f1-auth/a1-login/login-reducer\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    useEffect(() => {\r\n        if (true) {\r\n            dispatch(getMe())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <HashRouter>\r\n                <Header/>\r\n                {status === 'loading' && <Preloader/>}\r\n                <Routes/>\r\n                {error && <ErrorSnackBar errorMessage={error}/>}\r\n            </HashRouter>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {loginReducer} from \"../../n2-features/f1-auth/a1-login/login-reducer\";\r\nimport {registerReducer} from \"../../n2-features/f1-auth/a2-register/register-reducer\";\r\nimport {recoveryPasswordReducer} from \"../../n2-features/f1-auth/a3-recoveryPassword/recoveryPassword-reducer\";\r\nimport {newPasswordReducer} from \"../../n2-features/f1-auth/a4-newPassword/newPassword-reducer\";\r\nimport {packsReducer} from \"../../n2-features/f5-packs/Packs-reduser\";\r\nimport {appReducer} from \"./app-reduser\";\r\nimport {cardsReducer} from \"../../n2-features/f6-cards/Cards-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    login:loginReducer,\r\n    register:registerReducer,\r\n    recoveryPassword:recoveryPasswordReducer,\r\n    newPassword:newPasswordReducer,\r\n    app:appReducer,\r\n    packs:packsReducer,\r\n    cards: cardsReducer\r\n\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1-main/m1-ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from \"./n1-main/m2-bll/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}